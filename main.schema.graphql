# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AaveAddress {
  aTokenAddress: String!
  aTokenSymbol: String!
  address: String!
  decimals: Int!
  stableDebtTokenAddress: String!
  symbol: String!
  variableDebtTokenAddress: String!
}

type AavePool {
  aEmissionPerSecond: String!
  addresses: AaveAddress!
  availableLiquidity: String!
  baseLTVasCollateral: String!
  decimals: Int!
  id: String!
  liquidityRate: String!
  name: String!
  portfolio: AavePortfolio!
  price: AavePoolPrice!
  reserveLiquidationBonus: String!
  reserveLiquidationThreshold: String!
  sEmissionPerSecond: String!
  stableBorrowRate: String!
  symbol: String!
  totalATokenSupply: String!
  totalCurrentVariableDebt: String!
  totalLiquidity: String!
  totalLiquidityAsCollateral: String!
  totalPrincipalStableDebt: String!
  underlyingAsset: String!
  usageAsCollateralEnabled: Boolean!
  usdPrice: Float!
  utilizationRate: String!
  vEmissionPerSecond: String!
  variableBorrowRate: String!
}

type AavePoolPrice {
  id: String!
  priceInEth: String!
}

type AavePortfolio {
  stableBorrow: Float!
  totalDeposits: Float!
  variableBorrow: Float!
  walletBal: Float!
}

"""

Covalent Get Balances for address
https://www.covalenthq.com/docs/api/#/0/Class-A/Get-all-chain-statuses/lng=en
"""
type Balance {
  address: String!
  chainId: Float!
  items: [BalanceItem!]!
  nextUpdateAt: String!
  pagination: Pagination
  quoteCurrency: String!
  updatedAt: String!
}

type BalanceItem {
  balance: String!
  balance24h: String!
  contractAddress: String!
  contractDecimals: Float!
  contractName: String!
  contractTickerSymbol: String!
  lastTransferredAt: String!
  logoUrl: String!
  nftData: Float!
  quote: Float!
  quote24h: Float!
  quoteRate: Float!
  quoteRate24h: Float!
  supportsErc: [String!]
  type: String!
}

type Chain {
  blockExplorerUrl: String
  chainId: Int!
  geckoId: String!
  isTestNet: Boolean!
  label: String!
  logoUrl: String!
  name: String!
  rpcUrl: String!
  symbol: String!
}

"""

Coin Gaico Coin Details
https://api.coingecko.com/api/v3/coins/list?include_platform=true
"""
type CoinDetails {
  additional_notices: [String]
  assetPlatformId: String
  blockTimeInMinutes: Float
  categories: [String]
  coingeckoRank: Float
  coingeckoScore: Float
  communityData: Map
  communityScore: Float
  contractAddress: String
  countryOrigin: String
  description: Map
  developerData: Map
  developerScore: Float
  genesisDate: String
  hashingAlgorithm: String
  id: String!
  image: Map
  lastUpdated: String
  links: Map
  liquidityScore: Float
  localization: Map
  marketCapRank: Float
  marketData: MarketData
  name: String!
  platforms: Map
  publicInterestScore: Float
  publicInterestStats: Map
  publicNotice: String
  sentimentVotesDownPercentage: Float
  sentimentVotesUpPercentage: Float
  statusUpdates: [Map]
  symbol: String!
  tickers: [TickerData]
}

"""

Coin Gaico coin List
https://api.coingecko.com/api/v3/coins/list?include_platform=true
"""
type CoinList {
  id: String!
  name: String!
  platforms: Map
  symbol: String!
}

type CoingeckoInfo {
  id: String!
  referenceAssetID: String!
  symbol: String!
}

type CurveCoin {
  balance: String!
  balanceUSD: Float!
  token: CurveToken
}

type CurveCoins {
  ID: String!
  address: String!
  coingeckoID: String!
  decimals: Int!
  symbol: String!
  type: String!
  wrappedCoinType: String!
}

type CurvePool {
  adminFee: String!
  assetType: String!
  baseAPY: Float!
  coins: [CurveCoin!]!
  dailyVolume: Float!
  fee: String!
  id: String!
  liquidityUsd: Float!
  name: String!
  registryAddress: String!
  rewards: CurveRewards!
  swapAddress: String!
  totalBalance: Float!
  virtualPrice: String!
}

type CurveRewards {
  maxRewardPtc: Float!
  rewardPtc: Float!
}

type CurveToken {
  name: String!
  symbol: String!
  usdPrice: Float!
}

type EthGasStats {
  fastGasPrice: String!
  gasUsedRatio: String!
  lastBlock: String!
  proposeGasPrice: String!
  safeGasPrice: String!
  suggestBaseFee: String!
}

type GlobalStats {
  defiDominance: String!
  defiMarketCap: String!
  defiToEthRatio: String!
  ethMarketCap: String!
  topCoinDefiDominance: Float!
  topCoinName: String!
  tradingVolume24h: String!
}

type MarketData {
  ath: Map
  athChangePercentage: Map
  athDate: Map
  atl: Map
  atlChangePercentage: Map
  atlDate: Map
  circulatingSupply: Float
  currentPrice: Map
  fdvToTvlRatio: Float
  fullyDilutedValuation: Map
  high24h: Map
  lastUpdated: String
  low24h: Map
  marketCap: Map
  marketCapChange24h: Float
  marketCapChange24hInCurrency: Map
  marketCapChangePercentage24h: Float
  marketCapChangePercentage24hInCurrency: Map
  marketCapRank: Float
  maxSupply: Float
  mcapToTvlRatio: Float
  priceChange24h: Float
  priceChange24hInCurrency: Map
  priceChangePercentage14d: Float
  priceChangePercentage14dInCurrency: Map
  priceChangePercentage1hInCurrency: Map
  priceChangePercentage1y: Float
  priceChangePercentage1yInCurrency: Map
  priceChangePercentage200d: Float
  priceChangePercentage200dInCurrency: Map
  priceChangePercentage24h: Float
  priceChangePercentage24hInCurrency: Map
  priceChangePercentage30d: Float
  priceChangePercentage30dInCurrency: Map
  priceChangePercentage60d: Float
  priceChangePercentage60dInCurrency: Map
  priceChangePercentage7d: Float
  priceChangePercentage7dInCurrency: Map
  roi: Map
  sparkline7d: Map
  totalSupply: Float
  totalValueLocked: Map
  totalVolume: Map
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}

type Pagination {
  hasMore: Boolean
  pageNumber: Int
  pageSize: Int
  totalCount: Int
}

type Protocol {
  address: String!
  balance: Map!
  category: String!
  chain: String!
  chains: [String]!
  description: String!
  geckoId: String!
  id: String!
  name: String!
  symbol: String!
  tokenAddresses: [String]!
  twitter: String!
  updatedAt: Int!
  url: String!
  usdTvl: Map!
}

type Query {
  "Aave Pool "
  aavePools(chainId: Int!, userWallet: String = ""): [AavePool!]!
  "Covalent Balances"
  balances(address: String!, chainIds: [Int!]!): [Balance!]!
  chainLinkAddresses: Map!
  chainLinkPrice(chainId: Int! = 1, pairs: [String!]! = []): Map!
  chains: [Chain!]!
  "Curve Pool "
  curvePools: [CurvePool!]!
  "Gas Stats for ETH"
  gasStats: EthGasStats!
  "Global Staths for Coin Gaico"
  globalStats: GlobalStats!
  protocol(protocolId: String!): Protocol!
  "Supported Protocols"
  protocols: [Protocol]!
  "Recent Usd Prices "
  recentPrices: Map!
  """

  If tickers (a comma separated list of tickers
  is present), only return the spot prices for these tokens.
  """
  spotPrice(pageNumber: Int!, pageSize: Int!, tickers: String!): SpotPrice
  supportedTokens: [Token!]
  todos: [Todo!]!
  "Transactions"
  transactions(address: String!, chainId: Int! = 0, pageNumber: Int! = 0, pageSize: Int! = 100): [Transaction!]!
}

"""

Covalent Get Transactions for address
https://www.covalenthq.com/docs/api/#/0/Class-A/Get-all-chain-statuses/lng=en
"""
type SpotPrice {
  items: [SpotPriceItem]!
  pagination: Pagination
  updatedAt: String!
}

type SpotPriceItem {
  contractAddress: String!
  contractDecimals: Int!
  contractName: String!
  contractTickerSymbol: String!
  logoUrl: String!
  quoteRate: Float!
  rank: Int!
  supportsErc: String!
}

type TickerData {
  base: String
  bidAskSpreadPercentage: Float
  coinId: String
  convertedLast: Map
  convertedVolume: Map
  isAnomaly: Boolean
  isStale: Boolean
  last: Float
  lastFetchAt: String
  lastTradedAt: String
  market: Map
  target: String
  targetCoinId: String
  timestamp: String
  tokenInfoUrl: String
  tradeUrl: String
  trustScore: String
  volume: Float
}

type Todo {
  done: Boolean!
  id: ID!
  text: String!
  user: User!
}

type Token {
  ID: ID!
  address: String!
  chainKey: String!
  coingeckoId: String!
  logoURI: String!
  name: String!
  symbol: String!
}

"""

Return spot prices and metadata for all tickers or a select group of tickers. Without tickers
query param, it returns a paginated list of all tickers sorted by market cap.
https://api.covalenthq.com/v1/pricing/tickers/?quote-currency=USD&format=JSON&key=ckey_docs
"""
type Transaction {
  blockHash: String!
  blockNumber: String!
  confirmations: String!
  contractAddress: String!
  cumulativeGasUsed: String!
  from: String!
  function: String!
  gas: String!
  gasPrice: String!
  gasUsed: String!
  hash: String!
  input: String!
  isError: String!
  methodId: String!
  nonce: String!
  timeStamp: String!
  to: String!
  tokenTo: Token!
  transactionIndex: String!
  txreceiptStatus: String!
  value: String!
}

type User {
  id: ID!
  name: String!
}

scalar Map

input NewTodo {
  text: String!
  userId: String!
}
