# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"""

Covalent Get Balances for address
https://www.covalenthq.com/docs/api/#/0/Class-A/Get-all-chain-statuses/lng=en
"""
type Balance {
  address: String!
  chainId: Float!
  items: [BalanceItem!]!
  nextUpdateAt: String!
  pagination: Pagination
  quoteCurrency: String!
  updatedAt: String!
}

type BalanceItem {
  balance: String!
  balance24h: String!
  contractAddress: String!
  contractDecimals: Float!
  contractName: String!
  contractTickerSymbol: String!
  lastTransferredAt: String!
  logoUrl: String!
  nftData: Float!
  quote: Float!
  quote24h: Float!
  quoteRate: Float!
  quoteRate24h: Float!
  supportsErc: [String!]
  type: String!
}

"""

Covalent get al Chains
https://www.covalenthq.com/docs/api/#/0/Class-A/Get-all-chain-statuses/lng=en
"""
type Chain {
  chainId: String!
  dbSchemaName: String!
  isTestnet: Boolean!
  label: String!
  logoUrl: String!
  name: String!
}

"""

Coin Gaico Coin Details
https://api.coingecko.com/api/v3/coins/list?include_platform=true
"""
type CoinDetails {
  additional_notices: [String]
  assetPlatformId: String
  blockTimeInMinutes: Float
  categories: [String]
  coingeckoRank: Float
  coingeckoScore: Float
  communityData: Map
  communityScore: Float
  contractAddress: String
  countryOrigin: String
  description: Map
  developerData: Map
  developerScore: Float
  genesisDate: String
  hashingAlgorithm: String
  id: String!
  image: Map
  lastUpdated: String
  links: Map
  liquidityScore: Float
  localization: Map
  marketCapRank: Float
  marketData: MarketData
  name: String
  platforms: Map
  publicInterestScore: Float
  publicInterestStats: Map
  publicNotice: String
  sentimentVotesDownPercentage: Float
  sentimentVotesUpPercentage: Float
  statusUpdates: [Map]
  symbol: String
  tickers: [TickerData]
}

"""

Coin Gaico coin List
https://api.coingecko.com/api/v3/coins/list?include_platform=true
"""
type CoinList {
  id: String!
  name: String!
  platforms: Map
  symbol: String!
}

type EthGasStats {
  fastGasPrice: String!
  gasUsedRatio: String!
  lastBlock: String!
  proposeGasPrice: String!
  safeGasPrice: String!
  suggestBaseFee: String!
}

type GlobalStats {
  defiDominance: String!
  defiMarketCap: String!
  defiToEthRatio: String!
  ethMarketCap: String!
  topCoinDefiDominance: Float!
  topCoinName: String!
  tradingVolume24h: String!
}

type MarketData {
  ath: Map
  athChangePercentage: Map
  athDate: Map
  atl: Map
  atlChangePercentage: Map
  atlDate: Map
  circulatingSupply: Float
  currentPrice: Map
  fdvToTvlRatio: Float
  fullyDilutedValuation: Map
  high24h: Map
  lastUpdated: String
  low24h: Map
  marketCap: Map
  marketCapChange24h: Float
  marketCapChange24hInCurrency: Map
  marketCapChangePercentage24h: Float
  marketCapChangePercentage24hInCurrency: Map
  marketCapRank: Float
  maxSupply: Float
  mcapToTvlRatio: Float
  priceChange24h: Float
  priceChange24hInCurrency: Map
  priceChangePercentage14d: Float
  priceChangePercentage14dInCurrency: Map
  priceChangePercentage1hInCurrency: Map
  priceChangePercentage1y: Float
  priceChangePercentage1yInCurrency: Map
  priceChangePercentage200d: Float
  priceChangePercentage200dInCurrency: Map
  priceChangePercentage24h: Float
  priceChangePercentage24hInCurrency: Map
  priceChangePercentage30d: Float
  priceChangePercentage30dInCurrency: Map
  priceChangePercentage60d: Float
  priceChangePercentage60dInCurrency: Map
  priceChangePercentage7d: Float
  priceChangePercentage7dInCurrency: Map
  roi: Map
  sparkline7d: Map
  totalSupply: Float
  totalValueLocked: Map
  totalVolume: Map
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}

type Pagination {
  hasMore: Boolean
  pageNumber: Int
  pageSize: Int
  totalCount: Int
}

"""

DeFi Lama Protocols
Returns basic information on all listed protocols, their
current TVL and the changes to it in the last hour/day/week.
https://docs.llama.fi/api
"""
type Protocol {
  address: String!
  auditNote: String!
  audits: String!
  category: String!
  chain: String!
  chainTvls: Map
  chains: [String!]!
  change_1d: Float!
  change_1h: Float!
  change_7d: Float!
  cmcId: Int!
  description: String!
  fdv: Float!
  geckoId: String!
  id: ID!
  logo: String!
  mcap: Float!
  module: String!
  name: String!
  oracles: [String!]!
  slug: String!
  symbol: String!
  tvl: Float!
  twitter: String!
  url: String!
}

"""

DeFi Lama Protocol by slug
Returns historical data on the TVL of a protocol along with
some basic data on it. The fields `tokensInUsd` and `tokens`
are only available for some protocols.
https://docs.llama.fi/api
"""
type ProtocolDetails {
  address: String!
  auditLinks: [String!]!
  auditNote: String!
  audits: String!
  category: String!
  chain: String!
  chainTvls: Map!
  chains: [String!]!
  cmcId: Int!
  description: String!
  geckoId: String!
  id: ID!
  logo: String!
  misrepresentedTokens: Boolean!
  module: String!
  name: String!
  oracles: [String!]!
  symbol: String!
  tvl: [Map]
  twitter: String!
  url: String!
}

type Query {
  "Covalent Balances"
  balances(address: String!, chainIds: [Int!]!): [Balance!]!
  "Covalent Chains"
  chains: [Chain!]!
  "Coin Gaico Coin Details"
  coinDetails(coinId: String!): CoinDetails!
  "Coin Gaico Coin List"
  coinList: [CoinList]!
  "Gas Stats for ETH"
  gasStats: EthGasStats!
  "Global Staths for Coin Gaico"
  globalStats: GlobalStats!
  protocol(slug: String!): ProtocolDetails!
  protocols: [Protocol!]!
  """

  If tickers (a comma separated list of tickers
  is present), only return the spot prices for these tokens.
  """
  spotPrice(pageNumber: Int!, pageSize: Int!, tickers: String!): SpotPrice
  supportedTokens(resource: [String!]!): [Token!]!
  ticker(product: String = "BTC-USD"): Ticker!
  todos: [Todo!]!
  tokenPair(poolId: String!): UniswapBalance!
  tokenResources: [String!]!
  "Covalent Transactions"
  transactions(address: String!, chainId: Int!, pageNumber: Int!, pageSize: Int!): Transactions
  uniswapBalances(numberOfTokens: Int = 1000): [UniswapBalance!]!
  uniswapChart(interval: chartIntervals!, poolId: String!): [UniswapChart!]!
}

"""

Covalent Get Transactions for address
https://www.covalenthq.com/docs/api/#/0/Class-A/Get-all-chain-statuses/lng=en
"""
type SpotPrice {
  items: [SpotPriceItem]!
  pagination: Pagination
  updatedAt: String!
}

type SpotPriceItem {
  contractAddress: String!
  contractDecimals: Int!
  contractName: String!
  contractTickerSymbol: String!
  logoUrl: String!
  quoteRate: Float!
  rank: Int!
  supportsErc: String!
}

type Ticker {
  ID: String!
  price: Float!
  time: Int!
  volume: Float!
}

type TickerData {
  base: String
  bidAskSpreadPercentage: Float
  coinId: String
  convertedLast: Map
  convertedVolume: Map
  isAnomaly: Boolean
  isStale: Boolean
  last: Float
  lastFetchAt: String
  lastTradedAt: String
  market: Map
  target: String
  targetCoinId: String
  timestamp: String
  tokenInfoUrl: String
  tradeUrl: String
  trustScore: String
  volume: Float
}

type Todo {
  done: Boolean!
  id: ID!
  text: String!
  user: User!
}

type TodoXX {
  done: Boolean!
  id: ID!
  someOther: User!
  text: String!
  user: User!
}

type Token {
  ID: ID!
  address: String!
  chainId: Float!
  decimals: Float!
  logoURI: String!
  name: String!
  source: String!
  symbol: String!
}

type TransactionItem {
  blockHeight: Int
  blockSignedAt: String
  fromAddress: String
  fromAddressLabel: String
  gasOffered: Float
  gasPrice: Float
  gasQuote: Float
  gasQuoteRate: Float
  gasSpent: Float
  successful: Boolean
  toAddress: String
  toAddressLabel: String
  txHash: String
  txOffset: Int
  value: String
  valueQuote: Float
}

"""

Return spot prices and metadata for all tickers or a select group of tickers. Without tickers
query param, it returns a paginated list of all tickers sorted by market cap.
https://api.covalenthq.com/v1/pricing/tickers/?quote-currency=USD&format=JSON&key=ckey_docs
"""
type Transactions {
  address: String!
  chainId: Float!
  items: [TransactionItem!]
  nextUpdateAt: String!
  pagination: Pagination
  quoteCurrency: String!
  someOtherKeys: String
  updatedAt: String!
}

type UniswapBalance {
  createdAtTimestamp: Float!
  ethPriceUsd: Float!
  excludePair: Boolean!
  liquidityProviderCount: Int!
  percentChangeLiq1h: Float!
  percentChangeLiq24h: Float!
  "Pool ID from Uniswap"
  poolId: String!
  quoteAsset: String!
  quoteCurrency: String!
  reserveEth: Float!
  reserveIndex: Float!
  "Token 0 ID from Uniswap"
  token0Id: String!
  token0Name: String!
  token0PercentChange1h: Float!
  token0PercentChange24h: Float!
  token0Price: Float!
  token0PriceUsd: Float!
  token0Symbol: String!
  token1Id: String!
  token1Name: String!
  token1PercentChange1h: Float!
  token1PercentChange24h: Float!
  token1Price: Float!
  token1PriceUsd: Float!
  token1Symbol: String!
  txCount: Int!
  volumeUsd: Float!
}

type UniswapChart {
  ethPriceUsd: Float!
  liquidityUsdMil: Float!
  reserveEth: Float!
  token0Price: Float!
  token1Price: Float!
  unixTime: Int!
}

type User {
  id: ID!
  name: String!
}

enum chartIntervals {
  int_1D
  int_1M
  int_1Y
  int_3M
  int_6M
  int_7D
}

input NewTodo {
  text: String!
  userId: String!
}


scalar Map
