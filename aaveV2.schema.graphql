# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  subscription: Subscription
}

interface UserTransaction {
  id: ID!
  pool: Pool!
  timestamp: Int!
  user: User!
}

type AToken {
  """

  AToken address
  """
  id: ID!
  pool: Pool!
  tokenContractImpl: Bytes!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type ATokenBalanceHistoryItem {
  currentATokenBalance: BigInt!
  """

  userReserve + txHash
  """
  id: ID!
  index: BigInt!
  scaledATokenBalance: BigInt!
  timestamp: Int!
  userReserve: UserReserve!
}

type Borrow implements UserTransaction {
  amount: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  """

  tx hash
  """
  id: ID!
  onBehalfOf: User!
  pool: Pool!
  referrer: Referrer
  reserve: Reserve!
  stableTokenDebt: BigInt!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
  variableTokenDebt: BigInt!
}

type ChainlinkAggregator {
  id: ID!
  oracleAsset: PriceOracleAsset!
}

type ChainlinkENS {
  "address of the aggregator"
  aggregatorAddress: Bytes!
  "id is the node hash"
  id: ID!
  "symbol of the token represented on the aggregator"
  symbol: String!
  "token address represented with this aggregator"
  underlyingAddress: Bytes!
}

type ClaimIncentiveCall {
  amount: BigInt!
  """

  txHash
  """
  id: ID!
  incentivesController: IncentivesController!
  user: User!
}

type ContractToPoolMapping {
  id: ID!
  pool: Pool!
}

type Deposit implements UserTransaction {
  amount: BigInt!
  """

  tx hash
  """
  id: ID!
  onBehalfOf: User!
  pool: Pool!
  referrer: Referrer
  reserve: Reserve!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
}

type FlashLoan {
  amount: BigInt!
  """

  tx hash
  """
  id: ID!
  initiator: User!
  pool: Pool!
  reserve: Reserve!
  target: Bytes!
  timestamp: Int!
  totalFee: BigInt!
}

type IncentivesController {
  claimIncentives(first: Int = 100, orderBy: ClaimIncentiveCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ClaimIncentiveCall_filter): [ClaimIncentiveCall!]!
  emissionEndTimestamp: Int!
  """

  address of the incentives controller
  """
  id: ID!
  incentivizedActions(first: Int = 100, orderBy: IncentivizedAction_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: IncentivizedAction_filter): [IncentivizedAction!]!
  precision: Int!
  rewardToken: Bytes!
  rewardTokenDecimals: Int!
  rewardTokenSymbol: String!
}

type IncentivizedAction {
  amount: BigInt!
  """

  txHash
  """
  id: ID!
  incentivesController: IncentivesController!
  user: User!
}

type LiquidationCall implements UserTransaction {
  collateralAmount: BigInt!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  """

  tx hash
  """
  id: ID!
  liquidator: Bytes!
  pool: Pool!
  principalAmount: BigInt!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  timestamp: Int!
  user: User!
}

type MapAssetPool {
  """

  address of a /s /v token
  """
  id: ID!
  pool: String!
  underlyingAsset: Bytes!
}

type OriginationFeeLiquidation implements UserTransaction {
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  feeLiquidated: BigInt!
  """

  tx hash
  """
  id: ID!
  liquidatedCollateralForFee: BigInt!
  pool: Pool!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  timestamp: Int!
  user: User!
}

type Pool {
  active: Boolean!
  borrowHistory(first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrow_filter): [Borrow!]!
  configurationAdmin: Bytes
  depositHistory(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  emergencyAdmin: Bytes
  ethereumAddress: Bytes
  flashLoanHistory(first: Int = 100, orderBy: FlashLoan_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FlashLoan_filter): [FlashLoan!]!
  history(first: Int = 100, orderBy: PoolConfigurationHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PoolConfigurationHistoryItem_filter): [PoolConfigurationHistoryItem!]!
  id: ID!
  lastUpdateTimestamp: Int!
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolConfigurator: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolImpl: Bytes
  lendingRateOracle: Bytes
  liquidationCallHistory(first: Int = 100, orderBy: LiquidationCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LiquidationCall_filter): [LiquidationCall!]!
  originationFeeLiquidationHistory(first: Int = 100, orderBy: OriginationFeeLiquidation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: OriginationFeeLiquidation_filter): [OriginationFeeLiquidation!]!
  paused: Boolean!
  protocol: Protocol!
  proxyPriceProvider: Bytes
  rebalanceStableBorrowRateHistory(first: Int = 100, orderBy: RebalanceStableBorrowRate_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RebalanceStableBorrowRate_filter): [RebalanceStableBorrowRate!]!
  redeemUnderlyingHistory(first: Int = 100, orderBy: RedeemUnderlying_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RedeemUnderlying_filter): [RedeemUnderlying!]!
  repayHistory(first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Repay_filter): [Repay!]!
  reserves(first: Int = 100, orderBy: Reserve_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Reserve_filter): [Reserve!]!
  swapHistory(first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Swap_filter): [Swap!]!
  usageAsCollateralHistory(first: Int = 100, orderBy: UsageAsCollateral_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UsageAsCollateral_filter): [UsageAsCollateral!]!
}

type PoolConfigurationHistoryItem {
  active: Boolean
  configurationAdmin: Bytes
  """

  tx hash
  """
  id: ID!
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolConfigurator: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolImpl: Bytes
  lendingRateOracle: Bytes
  pool: Pool!
  proxyPriceProvider: Bytes
  timestamp: Int!
}

type PriceHistoryItem {
  asset: PriceOracleAsset!
  id: ID!
  price: BigInt!
  timestamp: Int!
}

type PriceOracle {
  fallbackPriceOracle: Bytes!
  id: ID!
  lastUpdateTimestamp: Int!
  proxyPriceProvider: Bytes!
  tokens(first: Int = 100, orderBy: PriceOracleAsset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PriceOracleAsset_filter): [PriceOracleAsset!]!
  tokensWithFallback(first: Int = 100, orderBy: PriceOracleAsset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PriceOracleAsset_filter): [PriceOracleAsset!]!
  usdDependentAssets(first: Int = 100, orderBy: PriceOracleAsset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PriceOracleAsset_filter): [PriceOracleAsset!]!
  usdPriceEth: BigInt!
  usdPriceEthFallbackRequired: Boolean!
  usdPriceEthHistory(first: Int = 100, orderBy: UsdEthPriceHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UsdEthPriceHistoryItem_filter): [UsdEthPriceHistoryItem!]!
  usdPriceEthMainSource: Bytes!
  version: Int!
}

type PriceOracleAsset {
  dependentAssets(first: Int = 100, orderBy: PriceOracleAsset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PriceOracleAsset_filter): [PriceOracleAsset!]!
  fromChainlinkSourcesRegistry: Boolean!
  id: ID!
  isFallbackRequired: Boolean!
  lastUpdateTimestamp: Int!
  oracle: PriceOracle!
  platform: PriceOracleAssetPlatform!
  priceHistory(first: Int = 100, orderBy: PriceHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PriceHistoryItem_filter): [PriceHistoryItem!]!
  priceInEth: BigInt!
  priceSource: Bytes!
  type: PriceOracleAssetType!
}

type Protocol {
  id: ID!
  pools(first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Pool_filter): [Pool!]!
}

type Query {
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
  atoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AToken
  atokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ATokenBalanceHistoryItem
  atokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ATokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ATokenBalanceHistoryItem_filter
  ): [ATokenBalanceHistoryItem!]!
  atokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: AToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: AToken_filter
  ): [AToken!]!
  borrow(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Borrow_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Borrow_filter
  ): [Borrow!]!
  chainlinkAggregator(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkAggregator
  chainlinkAggregators(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ChainlinkAggregator_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ChainlinkAggregator_filter
  ): [ChainlinkAggregator!]!
  chainlinkENS(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkENS
  chainlinkENSs(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ChainlinkENS_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ChainlinkENS_filter
  ): [ChainlinkENS!]!
  claimIncentiveCall(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimIncentiveCall
  claimIncentiveCalls(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ClaimIncentiveCall_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ClaimIncentiveCall_filter
  ): [ClaimIncentiveCall!]!
  contractToPoolMapping(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractToPoolMapping
  contractToPoolMappings(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ContractToPoolMapping_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ContractToPoolMapping_filter
  ): [ContractToPoolMapping!]!
  deposit(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Deposit_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Deposit_filter
  ): [Deposit!]!
  flashLoan(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: FlashLoan_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: FlashLoan_filter
  ): [FlashLoan!]!
  incentivesController(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncentivesController
  incentivesControllers(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IncentivesController_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IncentivesController_filter
  ): [IncentivesController!]!
  incentivizedAction(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncentivizedAction
  incentivizedActions(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IncentivizedAction_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IncentivizedAction_filter
  ): [IncentivizedAction!]!
  liquidationCall(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationCall
  liquidationCalls(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: LiquidationCall_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
  mapAssetPool(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MapAssetPool
  mapAssetPools(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MapAssetPool_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MapAssetPool_filter
  ): [MapAssetPool!]!
  originationFeeLiquidation(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OriginationFeeLiquidation
  originationFeeLiquidations(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: OriginationFeeLiquidation_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: OriginationFeeLiquidation_filter
  ): [OriginationFeeLiquidation!]!
  pool(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  poolConfigurationHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolConfigurationHistoryItem
  poolConfigurationHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PoolConfigurationHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PoolConfigurationHistoryItem_filter
  ): [PoolConfigurationHistoryItem!]!
  pools(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Pool_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Pool_filter
  ): [Pool!]!
  priceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceHistoryItem
  priceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceHistoryItem_filter
  ): [PriceHistoryItem!]!
  priceOracle(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracle
  priceOracleAsset(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracleAsset
  priceOracleAssets(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceOracleAsset_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  priceOracles(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceOracle_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceOracle_filter
  ): [PriceOracle!]!
  protocol(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Protocol_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Protocol_filter
  ): [Protocol!]!
  rebalanceStableBorrowRate(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceStableBorrowRate
  rebalanceStableBorrowRates(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RebalanceStableBorrowRate_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  redeemUnderlying(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RedeemUnderlying
  redeemUnderlyings(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RedeemUnderlying_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  referrer(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Referrer
  referrers(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Referrer_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Referrer_filter
  ): [Referrer!]!
  repay(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Repay_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Repay_filter
  ): [Repay!]!
  reserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reserve
  reserveConfigurationHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveConfigurationHistoryItem
  reserveConfigurationHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ReserveConfigurationHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ReserveConfigurationHistoryItem_filter
  ): [ReserveConfigurationHistoryItem!]!
  reserveParamsHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveParamsHistoryItem
  reserveParamsHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ReserveParamsHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ReserveParamsHistoryItem_filter
  ): [ReserveParamsHistoryItem!]!
  reserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Reserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Reserve_filter
  ): [Reserve!]!
  stableDebtToken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableDebtToken
  stableDebtTokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: StableDebtToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: StableDebtToken_filter
  ): [StableDebtToken!]!
  stableTokenDelegatedAllowance(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableTokenDelegatedAllowance
  stableTokenDelegatedAllowances(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: StableTokenDelegatedAllowance_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: StableTokenDelegatedAllowance_filter
  ): [StableTokenDelegatedAllowance!]!
  stoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SToken
  stokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): STokenBalanceHistoryItem
  stokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: STokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: STokenBalanceHistoryItem_filter
  ): [STokenBalanceHistoryItem!]!
  stokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: SToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: SToken_filter
  ): [SToken!]!
  swap(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swapHistories(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: SwapHistory_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: SwapHistory_filter
  ): [SwapHistory!]!
  swapHistory(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapHistory
  swaps(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Swap_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Swap_filter
  ): [Swap!]!
  usageAsCollateral(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageAsCollateral
  usageAsCollaterals(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UsageAsCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  usdEthPriceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsdEthPriceHistoryItem
  usdEthPriceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UsdEthPriceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UsdEthPriceHistoryItem_filter
  ): [UsdEthPriceHistoryItem!]!
  user(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  userReserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReserve
  userReserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UserReserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UserReserve_filter
  ): [UserReserve!]!
  userTransaction(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTransaction
  userTransactions(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UserTransaction_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UserTransaction_filter
  ): [UserTransaction!]!
  users(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: User_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: User_filter
  ): [User!]!
  variableDebtToken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableDebtToken
  variableDebtTokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VariableDebtToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VariableDebtToken_filter
  ): [VariableDebtToken!]!
  variableTokenDelegatedAllowance(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableTokenDelegatedAllowance
  variableTokenDelegatedAllowances(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VariableTokenDelegatedAllowance_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VariableTokenDelegatedAllowance_filter
  ): [VariableTokenDelegatedAllowance!]!
  vtoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VToken
  vtokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VTokenBalanceHistoryItem
  vtokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VTokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VTokenBalanceHistoryItem_filter
  ): [VTokenBalanceHistoryItem!]!
  vtokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VToken_filter
  ): [VToken!]!
  wethreserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WETHReserve
  wethreserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: WETHReserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: WETHReserve_filter
  ): [WETHReserve!]!
}

type RebalanceStableBorrowRate implements UserTransaction {
  borrowRateFrom: BigInt!
  borrowRateTo: BigInt!
  """

  tx hash
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
}

type RedeemUnderlying implements UserTransaction {
  amount: BigInt!
  """

  tx hash
  """
  id: ID!
  onBehalfOf: User!
  pool: Pool!
  reserve: Reserve!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
}

type Referrer {
  borrows(first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrow_filter): [Borrow!]!
  deposits(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  id: ID!
}

type Repay implements UserTransaction {
  amount: BigInt!
  """

  tx hash
  """
  id: ID!
  onBehalfOf: User!
  pool: Pool!
  reserve: Reserve!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
}

type Reserve {
  aEmissionPerSecond: BigInt!
  aIncentivesLastUpdateTimestamp: Int!
  aToken: AToken!
  aTokenIncentivesIndex: BigInt!
  availableLiquidity: BigInt!
  averageStableRate: BigInt!
  baseLTVasCollateral: BigInt!
  baseVariableBorrowRate: BigInt!
  borrowHistory(first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrow_filter): [Borrow!]!
  borrowingEnabled: Boolean!
  configurationHistory(first: Int = 100, orderBy: ReserveConfigurationHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ReserveConfigurationHistoryItem_filter): [ReserveConfigurationHistoryItem!]!
  decimals: Int!
  depositHistory(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  deposits(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  flashLoanHistory(first: Int = 100, orderBy: FlashLoan_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FlashLoan_filter): [FlashLoan!]!
  """

  Reserve address
  """
  id: ID!
  isActive: Boolean!
  isFrozen: Boolean!
  lastUpdateTimestamp: Int!
  lifetimeBorrows: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeFlashLoanPremium: BigInt!
  lifetimeFlashLoans: BigInt!
  lifetimeLiquidated: BigInt!
  lifetimeLiquidity: BigInt!
  lifetimePrincipalStableDebt: BigInt!
  lifetimeRepayments: BigInt!
  lifetimeReserveFactorAccrued: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeWithdrawals: BigInt!
  liquidationCallHistory(first: Int = 100, orderBy: LiquidationCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LiquidationCall_filter): [LiquidationCall!]!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  name: String!
  optimalUtilisationRate: BigInt!
  originationFeeLiquidationHistory(first: Int = 100, orderBy: OriginationFeeLiquidation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: OriginationFeeLiquidation_filter): [OriginationFeeLiquidation!]!
  paramsHistory(first: Int = 100, orderBy: ReserveParamsHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ReserveParamsHistoryItem_filter): [ReserveParamsHistoryItem!]!
  pool: Pool!
  price: PriceOracleAsset!
  rebalanceStableBorrowRateHistory(first: Int = 100, orderBy: RebalanceStableBorrowRate_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RebalanceStableBorrowRate_filter): [RebalanceStableBorrowRate!]!
  redeemUnderlyingHistory(first: Int = 100, orderBy: RedeemUnderlying_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RedeemUnderlying_filter): [RedeemUnderlying!]!
  repayHistory(first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Repay_filter): [Repay!]!
  reserveFactor: BigInt!
  reserveInterestRateStrategy: Bytes!
  reserveLiquidationBonus: BigInt!
  reserveLiquidationThreshold: BigInt!
  sEmissionPerSecond: BigInt!
  sIncentivesLastUpdateTimestamp: Int!
  sToken: SToken!
  sTokenIncentivesIndex: BigInt!
  stableBorrowRate: BigInt!
  stableBorrowRateEnabled: Boolean!
  stableDebtLastUpdateTimestamp: Int!
  stableRateSlope1: BigInt!
  stableRateSlope2: BigInt!
  swapHistory(first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Swap_filter): [Swap!]!
  symbol: String!
  totalATokenSupply: BigInt!
  totalCurrentVariableDebt: BigInt!
  totalDeposits: BigInt!
  totalLiquidity: BigInt!
  totalLiquidityAsCollateral: BigInt!
  totalPrincipalStableDebt: BigInt!
  totalScaledVariableDebt: BigInt!
  underlyingAsset: Bytes!
  usageAsCollateralEnabled: Boolean!
  usageAsCollateralHistory(first: Int = 100, orderBy: UsageAsCollateral_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UsageAsCollateral_filter): [UsageAsCollateral!]!
  userReserves(first: Int = 100, orderBy: UserReserve_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UserReserve_filter): [UserReserve!]!
  utilizationRate: BigDecimal!
  vEmissionPerSecond: BigInt!
  vIncentivesLastUpdateTimestamp: Int!
  vToken: VToken!
  vTokenIncentivesIndex: BigInt!
  variableBorrowIndex: BigInt!
  variableBorrowRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
}

type ReserveConfigurationHistoryItem {
  baseLTVasCollateral: BigInt!
  borrowingEnabled: Boolean!
  """

  tx hash
  """
  id: ID!
  isActive: Boolean!
  isFrozen: Boolean!
  reserve: Reserve!
  reserveInterestRateStrategy: Bytes!
  reserveLiquidationBonus: BigInt!
  reserveLiquidationThreshold: BigInt!
  stableBorrowRateEnabled: Boolean!
  timestamp: Int!
  usageAsCollateralEnabled: Boolean!
}

type ReserveParamsHistoryItem {
  availableLiquidity: BigInt!
  averageStableBorrowRate: BigInt!
  """

  tx hash
  """
  id: ID!
  lifetimeBorrows: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeFlashLoanPremium: BigInt!
  lifetimeFlashLoans: BigInt!
  lifetimeLiquidated: BigInt!
  lifetimeLiquidity: BigInt!
  lifetimePrincipalStableDebt: BigInt!
  lifetimeRepayments: BigInt!
  lifetimeReserveFactorAccrued: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeWithdrawals: BigInt!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  reserve: Reserve!
  stableBorrowRate: BigInt!
  timestamp: Int!
  totalATokenSupply: BigInt!
  totalCurrentVariableDebt: BigInt!
  totalLiquidity: BigInt!
  totalLiquidityAsCollateral: BigInt!
  totalPrincipalStableDebt: BigInt!
  totalScaledVariableDebt: BigInt!
  utilizationRate: BigDecimal!
  variableBorrowIndex: BigInt!
  variableBorrowRate: BigInt!
}

type SToken {
  """

  SToken address
  """
  id: ID!
  pool: Pool!
  tokenContractImpl: Bytes!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type STokenBalanceHistoryItem {
  avgStableBorrowRate: BigInt!
  currentStableDebt: BigInt!
  """

  userReserve + txHash
  """
  id: ID!
  principalStableDebt: BigInt!
  timestamp: Int!
  userReserve: UserReserve!
}

type StableDebtToken {
  """

  StableDebtToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type StableTokenDelegatedAllowance {
  amountAllowed: BigInt!
  fromUser: User!
  """

  stable + fromuser address + touser address+ reserve address
  """
  id: ID!
  toUser: User!
  userReserve: UserReserve!
}

type Subscription {
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
  atoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AToken
  atokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ATokenBalanceHistoryItem
  atokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ATokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ATokenBalanceHistoryItem_filter
  ): [ATokenBalanceHistoryItem!]!
  atokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: AToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: AToken_filter
  ): [AToken!]!
  borrow(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Borrow_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Borrow_filter
  ): [Borrow!]!
  chainlinkAggregator(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkAggregator
  chainlinkAggregators(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ChainlinkAggregator_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ChainlinkAggregator_filter
  ): [ChainlinkAggregator!]!
  chainlinkENS(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkENS
  chainlinkENSs(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ChainlinkENS_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ChainlinkENS_filter
  ): [ChainlinkENS!]!
  claimIncentiveCall(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimIncentiveCall
  claimIncentiveCalls(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ClaimIncentiveCall_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ClaimIncentiveCall_filter
  ): [ClaimIncentiveCall!]!
  contractToPoolMapping(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractToPoolMapping
  contractToPoolMappings(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ContractToPoolMapping_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ContractToPoolMapping_filter
  ): [ContractToPoolMapping!]!
  deposit(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Deposit_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Deposit_filter
  ): [Deposit!]!
  flashLoan(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: FlashLoan_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: FlashLoan_filter
  ): [FlashLoan!]!
  incentivesController(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncentivesController
  incentivesControllers(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IncentivesController_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IncentivesController_filter
  ): [IncentivesController!]!
  incentivizedAction(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncentivizedAction
  incentivizedActions(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IncentivizedAction_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IncentivizedAction_filter
  ): [IncentivizedAction!]!
  liquidationCall(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationCall
  liquidationCalls(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: LiquidationCall_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
  mapAssetPool(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MapAssetPool
  mapAssetPools(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MapAssetPool_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MapAssetPool_filter
  ): [MapAssetPool!]!
  originationFeeLiquidation(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OriginationFeeLiquidation
  originationFeeLiquidations(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: OriginationFeeLiquidation_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: OriginationFeeLiquidation_filter
  ): [OriginationFeeLiquidation!]!
  pool(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  poolConfigurationHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolConfigurationHistoryItem
  poolConfigurationHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PoolConfigurationHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PoolConfigurationHistoryItem_filter
  ): [PoolConfigurationHistoryItem!]!
  pools(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Pool_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Pool_filter
  ): [Pool!]!
  priceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceHistoryItem
  priceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceHistoryItem_filter
  ): [PriceHistoryItem!]!
  priceOracle(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracle
  priceOracleAsset(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracleAsset
  priceOracleAssets(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceOracleAsset_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  priceOracles(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: PriceOracle_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: PriceOracle_filter
  ): [PriceOracle!]!
  protocol(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Protocol_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Protocol_filter
  ): [Protocol!]!
  rebalanceStableBorrowRate(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceStableBorrowRate
  rebalanceStableBorrowRates(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RebalanceStableBorrowRate_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  redeemUnderlying(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RedeemUnderlying
  redeemUnderlyings(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RedeemUnderlying_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  referrer(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Referrer
  referrers(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Referrer_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Referrer_filter
  ): [Referrer!]!
  repay(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Repay_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Repay_filter
  ): [Repay!]!
  reserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reserve
  reserveConfigurationHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveConfigurationHistoryItem
  reserveConfigurationHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ReserveConfigurationHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ReserveConfigurationHistoryItem_filter
  ): [ReserveConfigurationHistoryItem!]!
  reserveParamsHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveParamsHistoryItem
  reserveParamsHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ReserveParamsHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ReserveParamsHistoryItem_filter
  ): [ReserveParamsHistoryItem!]!
  reserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Reserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Reserve_filter
  ): [Reserve!]!
  stableDebtToken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableDebtToken
  stableDebtTokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: StableDebtToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: StableDebtToken_filter
  ): [StableDebtToken!]!
  stableTokenDelegatedAllowance(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableTokenDelegatedAllowance
  stableTokenDelegatedAllowances(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: StableTokenDelegatedAllowance_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: StableTokenDelegatedAllowance_filter
  ): [StableTokenDelegatedAllowance!]!
  stoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SToken
  stokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): STokenBalanceHistoryItem
  stokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: STokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: STokenBalanceHistoryItem_filter
  ): [STokenBalanceHistoryItem!]!
  stokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: SToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: SToken_filter
  ): [SToken!]!
  swap(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swapHistories(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: SwapHistory_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: SwapHistory_filter
  ): [SwapHistory!]!
  swapHistory(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapHistory
  swaps(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Swap_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Swap_filter
  ): [Swap!]!
  usageAsCollateral(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageAsCollateral
  usageAsCollaterals(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UsageAsCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  usdEthPriceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsdEthPriceHistoryItem
  usdEthPriceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UsdEthPriceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UsdEthPriceHistoryItem_filter
  ): [UsdEthPriceHistoryItem!]!
  user(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  userReserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReserve
  userReserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UserReserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UserReserve_filter
  ): [UserReserve!]!
  userTransaction(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTransaction
  userTransactions(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: UserTransaction_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: UserTransaction_filter
  ): [UserTransaction!]!
  users(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: User_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: User_filter
  ): [User!]!
  variableDebtToken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableDebtToken
  variableDebtTokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VariableDebtToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VariableDebtToken_filter
  ): [VariableDebtToken!]!
  variableTokenDelegatedAllowance(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableTokenDelegatedAllowance
  variableTokenDelegatedAllowances(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VariableTokenDelegatedAllowance_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VariableTokenDelegatedAllowance_filter
  ): [VariableTokenDelegatedAllowance!]!
  vtoken(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VToken
  vtokenBalanceHistoryItem(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VTokenBalanceHistoryItem
  vtokenBalanceHistoryItems(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VTokenBalanceHistoryItem_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VTokenBalanceHistoryItem_filter
  ): [VTokenBalanceHistoryItem!]!
  vtokens(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: VToken_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: VToken_filter
  ): [VToken!]!
  wethreserve(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WETHReserve
  wethreserves(
    "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: WETHReserve_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: WETHReserve_filter
  ): [WETHReserve!]!
}

type Swap implements UserTransaction {
  borrowRateModeFrom: BorrowRateMode!
  borrowRateModeTo: BorrowRateMode!
  """

  tx hash
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  stableBorrowRate: BigInt!
  timestamp: Int!
  user: User!
  userReserve: UserReserve!
  variableBorrowRate: BigInt!
}

type SwapHistory {
  fromAmount: BigInt!
  fromAsset: String!
  """

  tx hash
  """
  id: ID!
  receivedAmount: BigInt!
  swapType: String!
  toAsset: String!
}

type UsageAsCollateral implements UserTransaction {
  fromState: Boolean!
  """

  tx hash
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  timestamp: Int!
  toState: Boolean!
  user: User!
  userReserve: UserReserve!
}

type UsdEthPriceHistoryItem {
  id: ID!
  oracle: PriceOracle!
  price: BigInt!
  timestamp: Int!
}

type User {
  borrowHistory(first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrow_filter): [Borrow!]!
  borrowedReservesCount: Int!
  claimIncentives(first: Int = 100, orderBy: ClaimIncentiveCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ClaimIncentiveCall_filter): [ClaimIncentiveCall!]!
  depositHistory(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  """

  user address
  """
  id: ID!
  incentivesLastUpdated: Int!
  incentivizedActions(first: Int = 100, orderBy: IncentivizedAction_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: IncentivizedAction_filter): [IncentivizedAction!]!
  lifetimeRewards: BigInt!
  liquidationCallHistory(first: Int = 100, orderBy: LiquidationCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LiquidationCall_filter): [LiquidationCall!]!
  originationFeeLiquidationHistory(first: Int = 100, orderBy: OriginationFeeLiquidation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: OriginationFeeLiquidation_filter): [OriginationFeeLiquidation!]!
  rebalanceStableBorrowRateHistory(first: Int = 100, orderBy: RebalanceStableBorrowRate_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RebalanceStableBorrowRate_filter): [RebalanceStableBorrowRate!]!
  redeemUnderlyingHistory(first: Int = 100, orderBy: RedeemUnderlying_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RedeemUnderlying_filter): [RedeemUnderlying!]!
  repayHistory(first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Repay_filter): [Repay!]!
  reserves(first: Int = 100, orderBy: UserReserve_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UserReserve_filter): [UserReserve!]!
  swapHistory(first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Swap_filter): [Swap!]!
  unclaimedRewards: BigInt!
  usageAsCollateralHistory(first: Int = 100, orderBy: UsageAsCollateral_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UsageAsCollateral_filter): [UsageAsCollateral!]!
}

type UserReserve {
  aIncentivesLastUpdateTimestamp: Int!
  aTokenBalanceHistory(first: Int = 100, orderBy: ATokenBalanceHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ATokenBalanceHistoryItem_filter): [ATokenBalanceHistoryItem!]!
  aTokenincentivesUserIndex: BigInt!
  borrowHistory(first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrow_filter): [Borrow!]!
  currentATokenBalance: BigInt!
  currentStableDebt: BigInt!
  currentTotalDebt: BigInt!
  currentVariableDebt: BigInt!
  depositHistory(first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deposit_filter): [Deposit!]!
  """

  user address + reserve address
  """
  id: ID!
  """

  Amount in currency units included as fee
  """
  lastUpdateTimestamp: Int!
  liquidationCallHistory(first: Int = 100, orderBy: LiquidationCall_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LiquidationCall_filter): [LiquidationCall!]!
  liquidityRate: BigInt!
  oldStableBorrowRate: BigInt!
  originationFeeLiquidationHistory(first: Int = 100, orderBy: OriginationFeeLiquidation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: OriginationFeeLiquidation_filter): [OriginationFeeLiquidation!]!
  pool: Pool!
  principalStableDebt: BigInt!
  rebalanceStableBorrowRateHistory(first: Int = 100, orderBy: RebalanceStableBorrowRate_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RebalanceStableBorrowRate_filter): [RebalanceStableBorrowRate!]!
  redeemUnderlyingHistory(first: Int = 100, orderBy: RedeemUnderlying_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RedeemUnderlying_filter): [RedeemUnderlying!]!
  repayHistory(first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Repay_filter): [Repay!]!
  reserve: Reserve!
  sIncentivesLastUpdateTimestamp: Int!
  sTokenBalanceHistory(first: Int = 100, orderBy: STokenBalanceHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: STokenBalanceHistoryItem_filter): [STokenBalanceHistoryItem!]!
  sTokenincentivesUserIndex: BigInt!
  scaledATokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  stableBorrowLastUpdateTimestamp: Int!
  stableBorrowRate: BigInt!
  stableTokenDelegatedAllowances(first: Int = 100, orderBy: StableTokenDelegatedAllowance_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: StableTokenDelegatedAllowance_filter): [StableTokenDelegatedAllowance!]!
  swapHistory(first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Swap_filter): [Swap!]!
  usageAsCollateralEnabledOnUser: Boolean!
  usageAsCollateralHistory(first: Int = 100, orderBy: UsageAsCollateral_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: UsageAsCollateral_filter): [UsageAsCollateral!]!
  user: User!
  vIncentivesLastUpdateTimestamp: Int!
  vTokenBalanceHistory(first: Int = 100, orderBy: VTokenBalanceHistoryItem_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: VTokenBalanceHistoryItem_filter): [VTokenBalanceHistoryItem!]!
  vTokenincentivesUserIndex: BigInt!
  variableBorrowIndex: BigInt!
  variableTokenDelegatedAllowances(first: Int = 100, orderBy: VariableTokenDelegatedAllowance_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: VariableTokenDelegatedAllowance_filter): [VariableTokenDelegatedAllowance!]!
}

type VToken {
  """

  VToken address
  """
  id: ID!
  pool: Pool!
  tokenContractImpl: Bytes!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type VTokenBalanceHistoryItem {
  currentVariableDebt: BigInt!
  """

  userReserve + txHash
  """
  id: ID!
  index: BigInt!
  scaledVariableDebt: BigInt!
  timestamp: Int!
  userReserve: UserReserve!
}

type VariableDebtToken {
  """

  VariableDebtToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type VariableTokenDelegatedAllowance {
  amountAllowed: BigInt!
  fromUser: User!
  """

  variable + fromuser address + touser address+ reserve address
  """
  id: ID!
  toUser: User!
  userReserve: UserReserve!
}

type WETHReserve {
  address: Bytes!
  decimals: Int!
  """

  weth address
  """
  id: ID!
  name: String!
  symbol: String!
  updatedBlockNumber: BigInt!
  updatedTimestamp: Int!
}

type _Block_ {
  "The hash of the block"
  hash: Bytes
  "The block number"
  number: Int!
}

"The type for the top-level _meta field"
type _Meta_ {
  """

  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  "The deployment ID"
  deployment: String!
  "If `true`, the subgraph encountered indexing errors at some past block"
  hasIndexingErrors: Boolean!
}

enum ATokenBalanceHistoryItem_orderBy {
  currentATokenBalance
  id
  index
  scaledATokenBalance
  timestamp
  userReserve
}

enum AToken_orderBy {
  id
  pool
  tokenContractImpl
  underlyingAssetAddress
  underlyingAssetDecimals
}

enum BorrowRateMode {
  None
  Stable
  Variable
}

enum Borrow_orderBy {
  amount
  borrowRate
  borrowRateMode
  id
  onBehalfOf
  pool
  referrer
  reserve
  stableTokenDebt
  timestamp
  user
  userReserve
  variableTokenDebt
}

enum ChainlinkAggregator_orderBy {
  id
  oracleAsset
}

enum ChainlinkENS_orderBy {
  aggregatorAddress
  id
  symbol
  underlyingAddress
}

enum ClaimIncentiveCall_orderBy {
  amount
  id
  incentivesController
  user
}

enum ContractToPoolMapping_orderBy {
  id
  pool
}

enum Deposit_orderBy {
  amount
  id
  onBehalfOf
  pool
  referrer
  reserve
  timestamp
  user
  userReserve
}

enum FlashLoan_orderBy {
  amount
  id
  initiator
  pool
  reserve
  target
  timestamp
  totalFee
}

enum IncentivesController_orderBy {
  claimIncentives
  emissionEndTimestamp
  id
  incentivizedActions
  precision
  rewardToken
  rewardTokenDecimals
  rewardTokenSymbol
}

enum IncentivizedAction_orderBy {
  amount
  id
  incentivesController
  user
}

enum LiquidationCall_orderBy {
  collateralAmount
  collateralReserve
  collateralUserReserve
  id
  liquidator
  pool
  principalAmount
  principalReserve
  principalUserReserve
  timestamp
  user
}

enum MapAssetPool_orderBy {
  id
  pool
  underlyingAsset
}

enum OrderDirection {
  asc
  desc
}

enum OriginationFeeLiquidation_orderBy {
  collateralReserve
  collateralUserReserve
  feeLiquidated
  id
  liquidatedCollateralForFee
  pool
  principalReserve
  principalUserReserve
  timestamp
  user
}

enum PoolConfigurationHistoryItem_orderBy {
  active
  configurationAdmin
  id
  lendingPool
  lendingPoolCollateralManager
  lendingPoolConfigurator
  lendingPoolConfiguratorImpl
  lendingPoolImpl
  lendingRateOracle
  pool
  proxyPriceProvider
  timestamp
}

enum Pool_orderBy {
  active
  borrowHistory
  configurationAdmin
  depositHistory
  emergencyAdmin
  ethereumAddress
  flashLoanHistory
  history
  id
  lastUpdateTimestamp
  lendingPool
  lendingPoolCollateralManager
  lendingPoolConfigurator
  lendingPoolConfiguratorImpl
  lendingPoolImpl
  lendingRateOracle
  liquidationCallHistory
  originationFeeLiquidationHistory
  paused
  protocol
  proxyPriceProvider
  rebalanceStableBorrowRateHistory
  redeemUnderlyingHistory
  repayHistory
  reserves
  swapHistory
  usageAsCollateralHistory
}

enum PriceHistoryItem_orderBy {
  asset
  id
  price
  timestamp
}

enum PriceOracleAssetPlatform {
  Simple
  Uniswap
}

enum PriceOracleAssetType {
  Composite
  Simple
}

enum PriceOracleAsset_orderBy {
  dependentAssets
  fromChainlinkSourcesRegistry
  id
  isFallbackRequired
  lastUpdateTimestamp
  oracle
  platform
  priceHistory
  priceInEth
  priceSource
  type
}

enum PriceOracle_orderBy {
  fallbackPriceOracle
  id
  lastUpdateTimestamp
  proxyPriceProvider
  tokens
  tokensWithFallback
  usdDependentAssets
  usdPriceEth
  usdPriceEthFallbackRequired
  usdPriceEthHistory
  usdPriceEthMainSource
  version
}

enum Protocol_orderBy {
  id
  pools
}

enum RebalanceStableBorrowRate_orderBy {
  borrowRateFrom
  borrowRateTo
  id
  pool
  reserve
  timestamp
  user
  userReserve
}

enum RedeemUnderlying_orderBy {
  amount
  id
  onBehalfOf
  pool
  reserve
  timestamp
  user
  userReserve
}

enum Referrer_orderBy {
  borrows
  deposits
  id
}

enum Repay_orderBy {
  amount
  id
  onBehalfOf
  pool
  reserve
  timestamp
  user
  userReserve
}

enum ReserveConfigurationHistoryItem_orderBy {
  baseLTVasCollateral
  borrowingEnabled
  id
  isActive
  isFrozen
  reserve
  reserveInterestRateStrategy
  reserveLiquidationBonus
  reserveLiquidationThreshold
  stableBorrowRateEnabled
  timestamp
  usageAsCollateralEnabled
}

enum ReserveParamsHistoryItem_orderBy {
  availableLiquidity
  averageStableBorrowRate
  id
  lifetimeBorrows
  lifetimeCurrentVariableDebt
  lifetimeDepositorsInterestEarned
  lifetimeFlashLoanPremium
  lifetimeFlashLoans
  lifetimeLiquidated
  lifetimeLiquidity
  lifetimePrincipalStableDebt
  lifetimeRepayments
  lifetimeReserveFactorAccrued
  lifetimeScaledVariableDebt
  lifetimeWithdrawals
  liquidityIndex
  liquidityRate
  priceInEth
  priceInUsd
  reserve
  stableBorrowRate
  timestamp
  totalATokenSupply
  totalCurrentVariableDebt
  totalLiquidity
  totalLiquidityAsCollateral
  totalPrincipalStableDebt
  totalScaledVariableDebt
  utilizationRate
  variableBorrowIndex
  variableBorrowRate
}

enum Reserve_orderBy {
  aEmissionPerSecond
  aIncentivesLastUpdateTimestamp
  aToken
  aTokenIncentivesIndex
  availableLiquidity
  averageStableRate
  baseLTVasCollateral
  baseVariableBorrowRate
  borrowHistory
  borrowingEnabled
  configurationHistory
  decimals
  depositHistory
  deposits
  flashLoanHistory
  id
  isActive
  isFrozen
  lastUpdateTimestamp
  lifetimeBorrows
  lifetimeCurrentVariableDebt
  lifetimeDepositorsInterestEarned
  lifetimeFlashLoanPremium
  lifetimeFlashLoans
  lifetimeLiquidated
  lifetimeLiquidity
  lifetimePrincipalStableDebt
  lifetimeRepayments
  lifetimeReserveFactorAccrued
  lifetimeScaledVariableDebt
  lifetimeWithdrawals
  liquidationCallHistory
  liquidityIndex
  liquidityRate
  name
  optimalUtilisationRate
  originationFeeLiquidationHistory
  paramsHistory
  pool
  price
  rebalanceStableBorrowRateHistory
  redeemUnderlyingHistory
  repayHistory
  reserveFactor
  reserveInterestRateStrategy
  reserveLiquidationBonus
  reserveLiquidationThreshold
  sEmissionPerSecond
  sIncentivesLastUpdateTimestamp
  sToken
  sTokenIncentivesIndex
  stableBorrowRate
  stableBorrowRateEnabled
  stableDebtLastUpdateTimestamp
  stableRateSlope1
  stableRateSlope2
  swapHistory
  symbol
  totalATokenSupply
  totalCurrentVariableDebt
  totalDeposits
  totalLiquidity
  totalLiquidityAsCollateral
  totalPrincipalStableDebt
  totalScaledVariableDebt
  underlyingAsset
  usageAsCollateralEnabled
  usageAsCollateralHistory
  userReserves
  utilizationRate
  vEmissionPerSecond
  vIncentivesLastUpdateTimestamp
  vToken
  vTokenIncentivesIndex
  variableBorrowIndex
  variableBorrowRate
  variableRateSlope1
  variableRateSlope2
}

enum STokenBalanceHistoryItem_orderBy {
  avgStableBorrowRate
  currentStableDebt
  id
  principalStableDebt
  timestamp
  userReserve
}

enum SToken_orderBy {
  id
  pool
  tokenContractImpl
  underlyingAssetAddress
  underlyingAssetDecimals
}

enum StableDebtToken_orderBy {
  id
  pool
  underlyingAssetAddress
  underlyingAssetDecimals
}

enum StableTokenDelegatedAllowance_orderBy {
  amountAllowed
  fromUser
  id
  toUser
  userReserve
}

enum SwapHistory_orderBy {
  fromAmount
  fromAsset
  id
  receivedAmount
  swapType
  toAsset
}

enum Swap_orderBy {
  borrowRateModeFrom
  borrowRateModeTo
  id
  pool
  reserve
  stableBorrowRate
  timestamp
  user
  userReserve
  variableBorrowRate
}

enum UsageAsCollateral_orderBy {
  fromState
  id
  pool
  reserve
  timestamp
  toState
  user
  userReserve
}

enum UsdEthPriceHistoryItem_orderBy {
  id
  oracle
  price
  timestamp
}

enum UserReserve_orderBy {
  aIncentivesLastUpdateTimestamp
  aTokenBalanceHistory
  aTokenincentivesUserIndex
  borrowHistory
  currentATokenBalance
  currentStableDebt
  currentTotalDebt
  currentVariableDebt
  depositHistory
  id
  lastUpdateTimestamp
  liquidationCallHistory
  liquidityRate
  oldStableBorrowRate
  originationFeeLiquidationHistory
  pool
  principalStableDebt
  rebalanceStableBorrowRateHistory
  redeemUnderlyingHistory
  repayHistory
  reserve
  sIncentivesLastUpdateTimestamp
  sTokenBalanceHistory
  sTokenincentivesUserIndex
  scaledATokenBalance
  scaledVariableDebt
  stableBorrowLastUpdateTimestamp
  stableBorrowRate
  stableTokenDelegatedAllowances
  swapHistory
  usageAsCollateralEnabledOnUser
  usageAsCollateralHistory
  user
  vIncentivesLastUpdateTimestamp
  vTokenBalanceHistory
  vTokenincentivesUserIndex
  variableBorrowIndex
  variableTokenDelegatedAllowances
}

enum UserTransaction_orderBy {
  id
  pool
  timestamp
  user
}

enum User_orderBy {
  borrowHistory
  borrowedReservesCount
  claimIncentives
  depositHistory
  id
  incentivesLastUpdated
  incentivizedActions
  lifetimeRewards
  liquidationCallHistory
  originationFeeLiquidationHistory
  rebalanceStableBorrowRateHistory
  redeemUnderlyingHistory
  repayHistory
  reserves
  swapHistory
  unclaimedRewards
  usageAsCollateralHistory
}

enum VTokenBalanceHistoryItem_orderBy {
  currentVariableDebt
  id
  index
  scaledVariableDebt
  timestamp
  userReserve
}

enum VToken_orderBy {
  id
  pool
  tokenContractImpl
  underlyingAssetAddress
  underlyingAssetDecimals
}

enum VariableDebtToken_orderBy {
  id
  pool
  underlyingAssetAddress
  underlyingAssetDecimals
}

enum VariableTokenDelegatedAllowance_orderBy {
  amountAllowed
  fromUser
  id
  toUser
  userReserve
}

enum WETHReserve_orderBy {
  address
  decimals
  id
  name
  symbol
  updatedBlockNumber
  updatedTimestamp
}

enum _SubgraphErrorPolicy_ {
  "Data will be returned even if the subgraph has indexing errors"
  allow
  "If the subgraph has indexing errors, data will be omitted. The default."
  deny
}

input ATokenBalanceHistoryItem_filter {
  currentATokenBalance: BigInt
  currentATokenBalance_gt: BigInt
  currentATokenBalance_gte: BigInt
  currentATokenBalance_in: [BigInt!]
  currentATokenBalance_lt: BigInt
  currentATokenBalance_lte: BigInt
  currentATokenBalance_not: BigInt
  currentATokenBalance_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  scaledATokenBalance: BigInt
  scaledATokenBalance_gt: BigInt
  scaledATokenBalance_gte: BigInt
  scaledATokenBalance_in: [BigInt!]
  scaledATokenBalance_lt: BigInt
  scaledATokenBalance_lte: BigInt
  scaledATokenBalance_not: BigInt
  scaledATokenBalance_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
}

input AToken_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  tokenContractImpl: Bytes
  tokenContractImpl_contains: Bytes
  tokenContractImpl_in: [Bytes!]
  tokenContractImpl_not: Bytes
  tokenContractImpl_not_contains: Bytes
  tokenContractImpl_not_in: [Bytes!]
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_not_in: [Int!]
}

input Block_height {
  hash: Bytes
  number: Int
}

input Borrow_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  borrowRate: BigInt
  borrowRateMode: BorrowRateMode
  borrowRateMode_in: [BorrowRateMode!]
  borrowRateMode_not: BorrowRateMode
  borrowRateMode_not_in: [BorrowRateMode!]
  borrowRate_gt: BigInt
  borrowRate_gte: BigInt
  borrowRate_in: [BigInt!]
  borrowRate_lt: BigInt
  borrowRate_lte: BigInt
  borrowRate_not: BigInt
  borrowRate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  onBehalfOf: String
  onBehalfOf_contains: String
  onBehalfOf_ends_with: String
  onBehalfOf_gt: String
  onBehalfOf_gte: String
  onBehalfOf_in: [String!]
  onBehalfOf_lt: String
  onBehalfOf_lte: String
  onBehalfOf_not: String
  onBehalfOf_not_contains: String
  onBehalfOf_not_ends_with: String
  onBehalfOf_not_in: [String!]
  onBehalfOf_not_starts_with: String
  onBehalfOf_starts_with: String
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  referrer: String
  referrer_contains: String
  referrer_ends_with: String
  referrer_gt: String
  referrer_gte: String
  referrer_in: [String!]
  referrer_lt: String
  referrer_lte: String
  referrer_not: String
  referrer_not_contains: String
  referrer_not_ends_with: String
  referrer_not_in: [String!]
  referrer_not_starts_with: String
  referrer_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  stableTokenDebt: BigInt
  stableTokenDebt_gt: BigInt
  stableTokenDebt_gte: BigInt
  stableTokenDebt_in: [BigInt!]
  stableTokenDebt_lt: BigInt
  stableTokenDebt_lte: BigInt
  stableTokenDebt_not: BigInt
  stableTokenDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
  variableTokenDebt: BigInt
  variableTokenDebt_gt: BigInt
  variableTokenDebt_gte: BigInt
  variableTokenDebt_in: [BigInt!]
  variableTokenDebt_lt: BigInt
  variableTokenDebt_lte: BigInt
  variableTokenDebt_not: BigInt
  variableTokenDebt_not_in: [BigInt!]
}

input ChainlinkAggregator_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  oracleAsset: String
  oracleAsset_contains: String
  oracleAsset_ends_with: String
  oracleAsset_gt: String
  oracleAsset_gte: String
  oracleAsset_in: [String!]
  oracleAsset_lt: String
  oracleAsset_lte: String
  oracleAsset_not: String
  oracleAsset_not_contains: String
  oracleAsset_not_ends_with: String
  oracleAsset_not_in: [String!]
  oracleAsset_not_starts_with: String
  oracleAsset_starts_with: String
}

input ChainlinkENS_filter {
  aggregatorAddress: Bytes
  aggregatorAddress_contains: Bytes
  aggregatorAddress_in: [Bytes!]
  aggregatorAddress_not: Bytes
  aggregatorAddress_not_contains: Bytes
  aggregatorAddress_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  symbol: String
  symbol_contains: String
  symbol_ends_with: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_ends_with: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_starts_with: String
  underlyingAddress: Bytes
  underlyingAddress_contains: Bytes
  underlyingAddress_in: [Bytes!]
  underlyingAddress_not: Bytes
  underlyingAddress_not_contains: Bytes
  underlyingAddress_not_in: [Bytes!]
}

input ClaimIncentiveCall_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  incentivesController: String
  incentivesController_contains: String
  incentivesController_ends_with: String
  incentivesController_gt: String
  incentivesController_gte: String
  incentivesController_in: [String!]
  incentivesController_lt: String
  incentivesController_lte: String
  incentivesController_not: String
  incentivesController_not_contains: String
  incentivesController_not_ends_with: String
  incentivesController_not_in: [String!]
  incentivesController_not_starts_with: String
  incentivesController_starts_with: String
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input ContractToPoolMapping_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
}

input Deposit_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  onBehalfOf: String
  onBehalfOf_contains: String
  onBehalfOf_ends_with: String
  onBehalfOf_gt: String
  onBehalfOf_gte: String
  onBehalfOf_in: [String!]
  onBehalfOf_lt: String
  onBehalfOf_lte: String
  onBehalfOf_not: String
  onBehalfOf_not_contains: String
  onBehalfOf_not_ends_with: String
  onBehalfOf_not_in: [String!]
  onBehalfOf_not_starts_with: String
  onBehalfOf_starts_with: String
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  referrer: String
  referrer_contains: String
  referrer_ends_with: String
  referrer_gt: String
  referrer_gte: String
  referrer_in: [String!]
  referrer_lt: String
  referrer_lte: String
  referrer_not: String
  referrer_not_contains: String
  referrer_not_ends_with: String
  referrer_not_in: [String!]
  referrer_not_starts_with: String
  referrer_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input FlashLoan_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  initiator: String
  initiator_contains: String
  initiator_ends_with: String
  initiator_gt: String
  initiator_gte: String
  initiator_in: [String!]
  initiator_lt: String
  initiator_lte: String
  initiator_not: String
  initiator_not_contains: String
  initiator_not_ends_with: String
  initiator_not_in: [String!]
  initiator_not_starts_with: String
  initiator_starts_with: String
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  target: Bytes
  target_contains: Bytes
  target_in: [Bytes!]
  target_not: Bytes
  target_not_contains: Bytes
  target_not_in: [Bytes!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  totalFee: BigInt
  totalFee_gt: BigInt
  totalFee_gte: BigInt
  totalFee_in: [BigInt!]
  totalFee_lt: BigInt
  totalFee_lte: BigInt
  totalFee_not: BigInt
  totalFee_not_in: [BigInt!]
}

input IncentivesController_filter {
  emissionEndTimestamp: Int
  emissionEndTimestamp_gt: Int
  emissionEndTimestamp_gte: Int
  emissionEndTimestamp_in: [Int!]
  emissionEndTimestamp_lt: Int
  emissionEndTimestamp_lte: Int
  emissionEndTimestamp_not: Int
  emissionEndTimestamp_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  precision: Int
  precision_gt: Int
  precision_gte: Int
  precision_in: [Int!]
  precision_lt: Int
  precision_lte: Int
  precision_not: Int
  precision_not_in: [Int!]
  rewardToken: Bytes
  rewardTokenDecimals: Int
  rewardTokenDecimals_gt: Int
  rewardTokenDecimals_gte: Int
  rewardTokenDecimals_in: [Int!]
  rewardTokenDecimals_lt: Int
  rewardTokenDecimals_lte: Int
  rewardTokenDecimals_not: Int
  rewardTokenDecimals_not_in: [Int!]
  rewardTokenSymbol: String
  rewardTokenSymbol_contains: String
  rewardTokenSymbol_ends_with: String
  rewardTokenSymbol_gt: String
  rewardTokenSymbol_gte: String
  rewardTokenSymbol_in: [String!]
  rewardTokenSymbol_lt: String
  rewardTokenSymbol_lte: String
  rewardTokenSymbol_not: String
  rewardTokenSymbol_not_contains: String
  rewardTokenSymbol_not_ends_with: String
  rewardTokenSymbol_not_in: [String!]
  rewardTokenSymbol_not_starts_with: String
  rewardTokenSymbol_starts_with: String
  rewardToken_contains: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not: Bytes
  rewardToken_not_contains: Bytes
  rewardToken_not_in: [Bytes!]
}

input IncentivizedAction_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  incentivesController: String
  incentivesController_contains: String
  incentivesController_ends_with: String
  incentivesController_gt: String
  incentivesController_gte: String
  incentivesController_in: [String!]
  incentivesController_lt: String
  incentivesController_lte: String
  incentivesController_not: String
  incentivesController_not_contains: String
  incentivesController_not_ends_with: String
  incentivesController_not_in: [String!]
  incentivesController_not_starts_with: String
  incentivesController_starts_with: String
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input LiquidationCall_filter {
  collateralAmount: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_lt: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_not: BigInt
  collateralAmount_not_in: [BigInt!]
  collateralReserve: String
  collateralReserve_contains: String
  collateralReserve_ends_with: String
  collateralReserve_gt: String
  collateralReserve_gte: String
  collateralReserve_in: [String!]
  collateralReserve_lt: String
  collateralReserve_lte: String
  collateralReserve_not: String
  collateralReserve_not_contains: String
  collateralReserve_not_ends_with: String
  collateralReserve_not_in: [String!]
  collateralReserve_not_starts_with: String
  collateralReserve_starts_with: String
  collateralUserReserve: String
  collateralUserReserve_contains: String
  collateralUserReserve_ends_with: String
  collateralUserReserve_gt: String
  collateralUserReserve_gte: String
  collateralUserReserve_in: [String!]
  collateralUserReserve_lt: String
  collateralUserReserve_lte: String
  collateralUserReserve_not: String
  collateralUserReserve_not_contains: String
  collateralUserReserve_not_ends_with: String
  collateralUserReserve_not_in: [String!]
  collateralUserReserve_not_starts_with: String
  collateralUserReserve_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidator: Bytes
  liquidator_contains: Bytes
  liquidator_in: [Bytes!]
  liquidator_not: Bytes
  liquidator_not_contains: Bytes
  liquidator_not_in: [Bytes!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  principalAmount: BigInt
  principalAmount_gt: BigInt
  principalAmount_gte: BigInt
  principalAmount_in: [BigInt!]
  principalAmount_lt: BigInt
  principalAmount_lte: BigInt
  principalAmount_not: BigInt
  principalAmount_not_in: [BigInt!]
  principalReserve: String
  principalReserve_contains: String
  principalReserve_ends_with: String
  principalReserve_gt: String
  principalReserve_gte: String
  principalReserve_in: [String!]
  principalReserve_lt: String
  principalReserve_lte: String
  principalReserve_not: String
  principalReserve_not_contains: String
  principalReserve_not_ends_with: String
  principalReserve_not_in: [String!]
  principalReserve_not_starts_with: String
  principalReserve_starts_with: String
  principalUserReserve: String
  principalUserReserve_contains: String
  principalUserReserve_ends_with: String
  principalUserReserve_gt: String
  principalUserReserve_gte: String
  principalUserReserve_in: [String!]
  principalUserReserve_lt: String
  principalUserReserve_lte: String
  principalUserReserve_not: String
  principalUserReserve_not_contains: String
  principalUserReserve_not_ends_with: String
  principalUserReserve_not_in: [String!]
  principalUserReserve_not_starts_with: String
  principalUserReserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input MapAssetPool_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  underlyingAsset: Bytes
  underlyingAsset_contains: Bytes
  underlyingAsset_in: [Bytes!]
  underlyingAsset_not: Bytes
  underlyingAsset_not_contains: Bytes
  underlyingAsset_not_in: [Bytes!]
}

input OriginationFeeLiquidation_filter {
  collateralReserve: String
  collateralReserve_contains: String
  collateralReserve_ends_with: String
  collateralReserve_gt: String
  collateralReserve_gte: String
  collateralReserve_in: [String!]
  collateralReserve_lt: String
  collateralReserve_lte: String
  collateralReserve_not: String
  collateralReserve_not_contains: String
  collateralReserve_not_ends_with: String
  collateralReserve_not_in: [String!]
  collateralReserve_not_starts_with: String
  collateralReserve_starts_with: String
  collateralUserReserve: String
  collateralUserReserve_contains: String
  collateralUserReserve_ends_with: String
  collateralUserReserve_gt: String
  collateralUserReserve_gte: String
  collateralUserReserve_in: [String!]
  collateralUserReserve_lt: String
  collateralUserReserve_lte: String
  collateralUserReserve_not: String
  collateralUserReserve_not_contains: String
  collateralUserReserve_not_ends_with: String
  collateralUserReserve_not_in: [String!]
  collateralUserReserve_not_starts_with: String
  collateralUserReserve_starts_with: String
  feeLiquidated: BigInt
  feeLiquidated_gt: BigInt
  feeLiquidated_gte: BigInt
  feeLiquidated_in: [BigInt!]
  feeLiquidated_lt: BigInt
  feeLiquidated_lte: BigInt
  feeLiquidated_not: BigInt
  feeLiquidated_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidatedCollateralForFee: BigInt
  liquidatedCollateralForFee_gt: BigInt
  liquidatedCollateralForFee_gte: BigInt
  liquidatedCollateralForFee_in: [BigInt!]
  liquidatedCollateralForFee_lt: BigInt
  liquidatedCollateralForFee_lte: BigInt
  liquidatedCollateralForFee_not: BigInt
  liquidatedCollateralForFee_not_in: [BigInt!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  principalReserve: String
  principalReserve_contains: String
  principalReserve_ends_with: String
  principalReserve_gt: String
  principalReserve_gte: String
  principalReserve_in: [String!]
  principalReserve_lt: String
  principalReserve_lte: String
  principalReserve_not: String
  principalReserve_not_contains: String
  principalReserve_not_ends_with: String
  principalReserve_not_in: [String!]
  principalReserve_not_starts_with: String
  principalReserve_starts_with: String
  principalUserReserve: String
  principalUserReserve_contains: String
  principalUserReserve_ends_with: String
  principalUserReserve_gt: String
  principalUserReserve_gte: String
  principalUserReserve_in: [String!]
  principalUserReserve_lt: String
  principalUserReserve_lte: String
  principalUserReserve_not: String
  principalUserReserve_not_contains: String
  principalUserReserve_not_ends_with: String
  principalUserReserve_not_in: [String!]
  principalUserReserve_not_starts_with: String
  principalUserReserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input PoolConfigurationHistoryItem_filter {
  active: Boolean
  active_in: [Boolean!]
  active_not: Boolean
  active_not_in: [Boolean!]
  configurationAdmin: Bytes
  configurationAdmin_contains: Bytes
  configurationAdmin_in: [Bytes!]
  configurationAdmin_not: Bytes
  configurationAdmin_not_contains: Bytes
  configurationAdmin_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolCollateralManager_contains: Bytes
  lendingPoolCollateralManager_in: [Bytes!]
  lendingPoolCollateralManager_not: Bytes
  lendingPoolCollateralManager_not_contains: Bytes
  lendingPoolCollateralManager_not_in: [Bytes!]
  lendingPoolConfigurator: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolConfiguratorImpl_contains: Bytes
  lendingPoolConfiguratorImpl_in: [Bytes!]
  lendingPoolConfiguratorImpl_not: Bytes
  lendingPoolConfiguratorImpl_not_contains: Bytes
  lendingPoolConfiguratorImpl_not_in: [Bytes!]
  lendingPoolConfigurator_contains: Bytes
  lendingPoolConfigurator_in: [Bytes!]
  lendingPoolConfigurator_not: Bytes
  lendingPoolConfigurator_not_contains: Bytes
  lendingPoolConfigurator_not_in: [Bytes!]
  lendingPoolImpl: Bytes
  lendingPoolImpl_contains: Bytes
  lendingPoolImpl_in: [Bytes!]
  lendingPoolImpl_not: Bytes
  lendingPoolImpl_not_contains: Bytes
  lendingPoolImpl_not_in: [Bytes!]
  lendingPool_contains: Bytes
  lendingPool_in: [Bytes!]
  lendingPool_not: Bytes
  lendingPool_not_contains: Bytes
  lendingPool_not_in: [Bytes!]
  lendingRateOracle: Bytes
  lendingRateOracle_contains: Bytes
  lendingRateOracle_in: [Bytes!]
  lendingRateOracle_not: Bytes
  lendingRateOracle_not_contains: Bytes
  lendingRateOracle_not_in: [Bytes!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  proxyPriceProvider: Bytes
  proxyPriceProvider_contains: Bytes
  proxyPriceProvider_in: [Bytes!]
  proxyPriceProvider_not: Bytes
  proxyPriceProvider_not_contains: Bytes
  proxyPriceProvider_not_in: [Bytes!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
}

input Pool_filter {
  active: Boolean
  active_in: [Boolean!]
  active_not: Boolean
  active_not_in: [Boolean!]
  configurationAdmin: Bytes
  configurationAdmin_contains: Bytes
  configurationAdmin_in: [Bytes!]
  configurationAdmin_not: Bytes
  configurationAdmin_not_contains: Bytes
  configurationAdmin_not_in: [Bytes!]
  emergencyAdmin: Bytes
  emergencyAdmin_contains: Bytes
  emergencyAdmin_in: [Bytes!]
  emergencyAdmin_not: Bytes
  emergencyAdmin_not_contains: Bytes
  emergencyAdmin_not_in: [Bytes!]
  ethereumAddress: Bytes
  ethereumAddress_contains: Bytes
  ethereumAddress_in: [Bytes!]
  ethereumAddress_not: Bytes
  ethereumAddress_not_contains: Bytes
  ethereumAddress_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_not_in: [Int!]
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolCollateralManager_contains: Bytes
  lendingPoolCollateralManager_in: [Bytes!]
  lendingPoolCollateralManager_not: Bytes
  lendingPoolCollateralManager_not_contains: Bytes
  lendingPoolCollateralManager_not_in: [Bytes!]
  lendingPoolConfigurator: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolConfiguratorImpl_contains: Bytes
  lendingPoolConfiguratorImpl_in: [Bytes!]
  lendingPoolConfiguratorImpl_not: Bytes
  lendingPoolConfiguratorImpl_not_contains: Bytes
  lendingPoolConfiguratorImpl_not_in: [Bytes!]
  lendingPoolConfigurator_contains: Bytes
  lendingPoolConfigurator_in: [Bytes!]
  lendingPoolConfigurator_not: Bytes
  lendingPoolConfigurator_not_contains: Bytes
  lendingPoolConfigurator_not_in: [Bytes!]
  lendingPoolImpl: Bytes
  lendingPoolImpl_contains: Bytes
  lendingPoolImpl_in: [Bytes!]
  lendingPoolImpl_not: Bytes
  lendingPoolImpl_not_contains: Bytes
  lendingPoolImpl_not_in: [Bytes!]
  lendingPool_contains: Bytes
  lendingPool_in: [Bytes!]
  lendingPool_not: Bytes
  lendingPool_not_contains: Bytes
  lendingPool_not_in: [Bytes!]
  lendingRateOracle: Bytes
  lendingRateOracle_contains: Bytes
  lendingRateOracle_in: [Bytes!]
  lendingRateOracle_not: Bytes
  lendingRateOracle_not_contains: Bytes
  lendingRateOracle_not_in: [Bytes!]
  paused: Boolean
  paused_in: [Boolean!]
  paused_not: Boolean
  paused_not_in: [Boolean!]
  protocol: String
  protocol_contains: String
  protocol_ends_with: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_ends_with: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_starts_with: String
  proxyPriceProvider: Bytes
  proxyPriceProvider_contains: Bytes
  proxyPriceProvider_in: [Bytes!]
  proxyPriceProvider_not: Bytes
  proxyPriceProvider_not_contains: Bytes
  proxyPriceProvider_not_in: [Bytes!]
}

input PriceHistoryItem_filter {
  asset: String
  asset_contains: String
  asset_ends_with: String
  asset_gt: String
  asset_gte: String
  asset_in: [String!]
  asset_lt: String
  asset_lte: String
  asset_not: String
  asset_not_contains: String
  asset_not_ends_with: String
  asset_not_in: [String!]
  asset_not_starts_with: String
  asset_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  price: BigInt
  price_gt: BigInt
  price_gte: BigInt
  price_in: [BigInt!]
  price_lt: BigInt
  price_lte: BigInt
  price_not: BigInt
  price_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
}

input PriceOracleAsset_filter {
  dependentAssets: [String!]
  dependentAssets_contains: [String!]
  dependentAssets_not: [String!]
  dependentAssets_not_contains: [String!]
  fromChainlinkSourcesRegistry: Boolean
  fromChainlinkSourcesRegistry_in: [Boolean!]
  fromChainlinkSourcesRegistry_not: Boolean
  fromChainlinkSourcesRegistry_not_in: [Boolean!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isFallbackRequired: Boolean
  isFallbackRequired_in: [Boolean!]
  isFallbackRequired_not: Boolean
  isFallbackRequired_not_in: [Boolean!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_not_in: [Int!]
  oracle: String
  oracle_contains: String
  oracle_ends_with: String
  oracle_gt: String
  oracle_gte: String
  oracle_in: [String!]
  oracle_lt: String
  oracle_lte: String
  oracle_not: String
  oracle_not_contains: String
  oracle_not_ends_with: String
  oracle_not_in: [String!]
  oracle_not_starts_with: String
  oracle_starts_with: String
  platform: PriceOracleAssetPlatform
  platform_in: [PriceOracleAssetPlatform!]
  platform_not: PriceOracleAssetPlatform
  platform_not_in: [PriceOracleAssetPlatform!]
  priceInEth: BigInt
  priceInEth_gt: BigInt
  priceInEth_gte: BigInt
  priceInEth_in: [BigInt!]
  priceInEth_lt: BigInt
  priceInEth_lte: BigInt
  priceInEth_not: BigInt
  priceInEth_not_in: [BigInt!]
  priceSource: Bytes
  priceSource_contains: Bytes
  priceSource_in: [Bytes!]
  priceSource_not: Bytes
  priceSource_not_contains: Bytes
  priceSource_not_in: [Bytes!]
  type: PriceOracleAssetType
  type_in: [PriceOracleAssetType!]
  type_not: PriceOracleAssetType
  type_not_in: [PriceOracleAssetType!]
}

input PriceOracle_filter {
  fallbackPriceOracle: Bytes
  fallbackPriceOracle_contains: Bytes
  fallbackPriceOracle_in: [Bytes!]
  fallbackPriceOracle_not: Bytes
  fallbackPriceOracle_not_contains: Bytes
  fallbackPriceOracle_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_not_in: [Int!]
  proxyPriceProvider: Bytes
  proxyPriceProvider_contains: Bytes
  proxyPriceProvider_in: [Bytes!]
  proxyPriceProvider_not: Bytes
  proxyPriceProvider_not_contains: Bytes
  proxyPriceProvider_not_in: [Bytes!]
  tokensWithFallback: [String!]
  tokensWithFallback_contains: [String!]
  tokensWithFallback_not: [String!]
  tokensWithFallback_not_contains: [String!]
  usdDependentAssets: [String!]
  usdDependentAssets_contains: [String!]
  usdDependentAssets_not: [String!]
  usdDependentAssets_not_contains: [String!]
  usdPriceEth: BigInt
  usdPriceEthFallbackRequired: Boolean
  usdPriceEthFallbackRequired_in: [Boolean!]
  usdPriceEthFallbackRequired_not: Boolean
  usdPriceEthFallbackRequired_not_in: [Boolean!]
  usdPriceEthMainSource: Bytes
  usdPriceEthMainSource_contains: Bytes
  usdPriceEthMainSource_in: [Bytes!]
  usdPriceEthMainSource_not: Bytes
  usdPriceEthMainSource_not_contains: Bytes
  usdPriceEthMainSource_not_in: [Bytes!]
  usdPriceEth_gt: BigInt
  usdPriceEth_gte: BigInt
  usdPriceEth_in: [BigInt!]
  usdPriceEth_lt: BigInt
  usdPriceEth_lte: BigInt
  usdPriceEth_not: BigInt
  usdPriceEth_not_in: [BigInt!]
  version: Int
  version_gt: Int
  version_gte: Int
  version_in: [Int!]
  version_lt: Int
  version_lte: Int
  version_not: Int
  version_not_in: [Int!]
}

input Protocol_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

input RebalanceStableBorrowRate_filter {
  borrowRateFrom: BigInt
  borrowRateFrom_gt: BigInt
  borrowRateFrom_gte: BigInt
  borrowRateFrom_in: [BigInt!]
  borrowRateFrom_lt: BigInt
  borrowRateFrom_lte: BigInt
  borrowRateFrom_not: BigInt
  borrowRateFrom_not_in: [BigInt!]
  borrowRateTo: BigInt
  borrowRateTo_gt: BigInt
  borrowRateTo_gte: BigInt
  borrowRateTo_in: [BigInt!]
  borrowRateTo_lt: BigInt
  borrowRateTo_lte: BigInt
  borrowRateTo_not: BigInt
  borrowRateTo_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input RedeemUnderlying_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  onBehalfOf: String
  onBehalfOf_contains: String
  onBehalfOf_ends_with: String
  onBehalfOf_gt: String
  onBehalfOf_gte: String
  onBehalfOf_in: [String!]
  onBehalfOf_lt: String
  onBehalfOf_lte: String
  onBehalfOf_not: String
  onBehalfOf_not_contains: String
  onBehalfOf_not_ends_with: String
  onBehalfOf_not_in: [String!]
  onBehalfOf_not_starts_with: String
  onBehalfOf_starts_with: String
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input Referrer_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

input Repay_filter {
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  onBehalfOf: String
  onBehalfOf_contains: String
  onBehalfOf_ends_with: String
  onBehalfOf_gt: String
  onBehalfOf_gte: String
  onBehalfOf_in: [String!]
  onBehalfOf_lt: String
  onBehalfOf_lte: String
  onBehalfOf_not: String
  onBehalfOf_not_contains: String
  onBehalfOf_not_ends_with: String
  onBehalfOf_not_in: [String!]
  onBehalfOf_not_starts_with: String
  onBehalfOf_starts_with: String
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input ReserveConfigurationHistoryItem_filter {
  baseLTVasCollateral: BigInt
  baseLTVasCollateral_gt: BigInt
  baseLTVasCollateral_gte: BigInt
  baseLTVasCollateral_in: [BigInt!]
  baseLTVasCollateral_lt: BigInt
  baseLTVasCollateral_lte: BigInt
  baseLTVasCollateral_not: BigInt
  baseLTVasCollateral_not_in: [BigInt!]
  borrowingEnabled: Boolean
  borrowingEnabled_in: [Boolean!]
  borrowingEnabled_not: Boolean
  borrowingEnabled_not_in: [Boolean!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isActive: Boolean
  isActive_in: [Boolean!]
  isActive_not: Boolean
  isActive_not_in: [Boolean!]
  isFrozen: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not: Boolean
  isFrozen_not_in: [Boolean!]
  reserve: String
  reserveInterestRateStrategy: Bytes
  reserveInterestRateStrategy_contains: Bytes
  reserveInterestRateStrategy_in: [Bytes!]
  reserveInterestRateStrategy_not: Bytes
  reserveInterestRateStrategy_not_contains: Bytes
  reserveInterestRateStrategy_not_in: [Bytes!]
  reserveLiquidationBonus: BigInt
  reserveLiquidationBonus_gt: BigInt
  reserveLiquidationBonus_gte: BigInt
  reserveLiquidationBonus_in: [BigInt!]
  reserveLiquidationBonus_lt: BigInt
  reserveLiquidationBonus_lte: BigInt
  reserveLiquidationBonus_not: BigInt
  reserveLiquidationBonus_not_in: [BigInt!]
  reserveLiquidationThreshold: BigInt
  reserveLiquidationThreshold_gt: BigInt
  reserveLiquidationThreshold_gte: BigInt
  reserveLiquidationThreshold_in: [BigInt!]
  reserveLiquidationThreshold_lt: BigInt
  reserveLiquidationThreshold_lte: BigInt
  reserveLiquidationThreshold_not: BigInt
  reserveLiquidationThreshold_not_in: [BigInt!]
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  stableBorrowRateEnabled: Boolean
  stableBorrowRateEnabled_in: [Boolean!]
  stableBorrowRateEnabled_not: Boolean
  stableBorrowRateEnabled_not_in: [Boolean!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  usageAsCollateralEnabled: Boolean
  usageAsCollateralEnabled_in: [Boolean!]
  usageAsCollateralEnabled_not: Boolean
  usageAsCollateralEnabled_not_in: [Boolean!]
}

input ReserveParamsHistoryItem_filter {
  availableLiquidity: BigInt
  availableLiquidity_gt: BigInt
  availableLiquidity_gte: BigInt
  availableLiquidity_in: [BigInt!]
  availableLiquidity_lt: BigInt
  availableLiquidity_lte: BigInt
  availableLiquidity_not: BigInt
  availableLiquidity_not_in: [BigInt!]
  averageStableBorrowRate: BigInt
  averageStableBorrowRate_gt: BigInt
  averageStableBorrowRate_gte: BigInt
  averageStableBorrowRate_in: [BigInt!]
  averageStableBorrowRate_lt: BigInt
  averageStableBorrowRate_lte: BigInt
  averageStableBorrowRate_not: BigInt
  averageStableBorrowRate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lifetimeBorrows: BigInt
  lifetimeBorrows_gt: BigInt
  lifetimeBorrows_gte: BigInt
  lifetimeBorrows_in: [BigInt!]
  lifetimeBorrows_lt: BigInt
  lifetimeBorrows_lte: BigInt
  lifetimeBorrows_not: BigInt
  lifetimeBorrows_not_in: [BigInt!]
  lifetimeCurrentVariableDebt: BigInt
  lifetimeCurrentVariableDebt_gt: BigInt
  lifetimeCurrentVariableDebt_gte: BigInt
  lifetimeCurrentVariableDebt_in: [BigInt!]
  lifetimeCurrentVariableDebt_lt: BigInt
  lifetimeCurrentVariableDebt_lte: BigInt
  lifetimeCurrentVariableDebt_not: BigInt
  lifetimeCurrentVariableDebt_not_in: [BigInt!]
  lifetimeDepositorsInterestEarned: BigInt
  lifetimeDepositorsInterestEarned_gt: BigInt
  lifetimeDepositorsInterestEarned_gte: BigInt
  lifetimeDepositorsInterestEarned_in: [BigInt!]
  lifetimeDepositorsInterestEarned_lt: BigInt
  lifetimeDepositorsInterestEarned_lte: BigInt
  lifetimeDepositorsInterestEarned_not: BigInt
  lifetimeDepositorsInterestEarned_not_in: [BigInt!]
  lifetimeFlashLoanPremium: BigInt
  lifetimeFlashLoanPremium_gt: BigInt
  lifetimeFlashLoanPremium_gte: BigInt
  lifetimeFlashLoanPremium_in: [BigInt!]
  lifetimeFlashLoanPremium_lt: BigInt
  lifetimeFlashLoanPremium_lte: BigInt
  lifetimeFlashLoanPremium_not: BigInt
  lifetimeFlashLoanPremium_not_in: [BigInt!]
  lifetimeFlashLoans: BigInt
  lifetimeFlashLoans_gt: BigInt
  lifetimeFlashLoans_gte: BigInt
  lifetimeFlashLoans_in: [BigInt!]
  lifetimeFlashLoans_lt: BigInt
  lifetimeFlashLoans_lte: BigInt
  lifetimeFlashLoans_not: BigInt
  lifetimeFlashLoans_not_in: [BigInt!]
  lifetimeLiquidated: BigInt
  lifetimeLiquidated_gt: BigInt
  lifetimeLiquidated_gte: BigInt
  lifetimeLiquidated_in: [BigInt!]
  lifetimeLiquidated_lt: BigInt
  lifetimeLiquidated_lte: BigInt
  lifetimeLiquidated_not: BigInt
  lifetimeLiquidated_not_in: [BigInt!]
  lifetimeLiquidity: BigInt
  lifetimeLiquidity_gt: BigInt
  lifetimeLiquidity_gte: BigInt
  lifetimeLiquidity_in: [BigInt!]
  lifetimeLiquidity_lt: BigInt
  lifetimeLiquidity_lte: BigInt
  lifetimeLiquidity_not: BigInt
  lifetimeLiquidity_not_in: [BigInt!]
  lifetimePrincipalStableDebt: BigInt
  lifetimePrincipalStableDebt_gt: BigInt
  lifetimePrincipalStableDebt_gte: BigInt
  lifetimePrincipalStableDebt_in: [BigInt!]
  lifetimePrincipalStableDebt_lt: BigInt
  lifetimePrincipalStableDebt_lte: BigInt
  lifetimePrincipalStableDebt_not: BigInt
  lifetimePrincipalStableDebt_not_in: [BigInt!]
  lifetimeRepayments: BigInt
  lifetimeRepayments_gt: BigInt
  lifetimeRepayments_gte: BigInt
  lifetimeRepayments_in: [BigInt!]
  lifetimeRepayments_lt: BigInt
  lifetimeRepayments_lte: BigInt
  lifetimeRepayments_not: BigInt
  lifetimeRepayments_not_in: [BigInt!]
  lifetimeReserveFactorAccrued: BigInt
  lifetimeReserveFactorAccrued_gt: BigInt
  lifetimeReserveFactorAccrued_gte: BigInt
  lifetimeReserveFactorAccrued_in: [BigInt!]
  lifetimeReserveFactorAccrued_lt: BigInt
  lifetimeReserveFactorAccrued_lte: BigInt
  lifetimeReserveFactorAccrued_not: BigInt
  lifetimeReserveFactorAccrued_not_in: [BigInt!]
  lifetimeScaledVariableDebt: BigInt
  lifetimeScaledVariableDebt_gt: BigInt
  lifetimeScaledVariableDebt_gte: BigInt
  lifetimeScaledVariableDebt_in: [BigInt!]
  lifetimeScaledVariableDebt_lt: BigInt
  lifetimeScaledVariableDebt_lte: BigInt
  lifetimeScaledVariableDebt_not: BigInt
  lifetimeScaledVariableDebt_not_in: [BigInt!]
  lifetimeWithdrawals: BigInt
  lifetimeWithdrawals_gt: BigInt
  lifetimeWithdrawals_gte: BigInt
  lifetimeWithdrawals_in: [BigInt!]
  lifetimeWithdrawals_lt: BigInt
  lifetimeWithdrawals_lte: BigInt
  lifetimeWithdrawals_not: BigInt
  lifetimeWithdrawals_not_in: [BigInt!]
  liquidityIndex: BigInt
  liquidityIndex_gt: BigInt
  liquidityIndex_gte: BigInt
  liquidityIndex_in: [BigInt!]
  liquidityIndex_lt: BigInt
  liquidityIndex_lte: BigInt
  liquidityIndex_not: BigInt
  liquidityIndex_not_in: [BigInt!]
  liquidityRate: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_lt: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_not: BigInt
  liquidityRate_not_in: [BigInt!]
  priceInEth: BigInt
  priceInEth_gt: BigInt
  priceInEth_gte: BigInt
  priceInEth_in: [BigInt!]
  priceInEth_lt: BigInt
  priceInEth_lte: BigInt
  priceInEth_not: BigInt
  priceInEth_not_in: [BigInt!]
  priceInUsd: BigDecimal
  priceInUsd_gt: BigDecimal
  priceInUsd_gte: BigDecimal
  priceInUsd_in: [BigDecimal!]
  priceInUsd_lt: BigDecimal
  priceInUsd_lte: BigDecimal
  priceInUsd_not: BigDecimal
  priceInUsd_not_in: [BigDecimal!]
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  stableBorrowRate: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_lt: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  totalATokenSupply: BigInt
  totalATokenSupply_gt: BigInt
  totalATokenSupply_gte: BigInt
  totalATokenSupply_in: [BigInt!]
  totalATokenSupply_lt: BigInt
  totalATokenSupply_lte: BigInt
  totalATokenSupply_not: BigInt
  totalATokenSupply_not_in: [BigInt!]
  totalCurrentVariableDebt: BigInt
  totalCurrentVariableDebt_gt: BigInt
  totalCurrentVariableDebt_gte: BigInt
  totalCurrentVariableDebt_in: [BigInt!]
  totalCurrentVariableDebt_lt: BigInt
  totalCurrentVariableDebt_lte: BigInt
  totalCurrentVariableDebt_not: BigInt
  totalCurrentVariableDebt_not_in: [BigInt!]
  totalLiquidity: BigInt
  totalLiquidityAsCollateral: BigInt
  totalLiquidityAsCollateral_gt: BigInt
  totalLiquidityAsCollateral_gte: BigInt
  totalLiquidityAsCollateral_in: [BigInt!]
  totalLiquidityAsCollateral_lt: BigInt
  totalLiquidityAsCollateral_lte: BigInt
  totalLiquidityAsCollateral_not: BigInt
  totalLiquidityAsCollateral_not_in: [BigInt!]
  totalLiquidity_gt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_lt: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_not_in: [BigInt!]
  totalPrincipalStableDebt: BigInt
  totalPrincipalStableDebt_gt: BigInt
  totalPrincipalStableDebt_gte: BigInt
  totalPrincipalStableDebt_in: [BigInt!]
  totalPrincipalStableDebt_lt: BigInt
  totalPrincipalStableDebt_lte: BigInt
  totalPrincipalStableDebt_not: BigInt
  totalPrincipalStableDebt_not_in: [BigInt!]
  totalScaledVariableDebt: BigInt
  totalScaledVariableDebt_gt: BigInt
  totalScaledVariableDebt_gte: BigInt
  totalScaledVariableDebt_in: [BigInt!]
  totalScaledVariableDebt_lt: BigInt
  totalScaledVariableDebt_lte: BigInt
  totalScaledVariableDebt_not: BigInt
  totalScaledVariableDebt_not_in: [BigInt!]
  utilizationRate: BigDecimal
  utilizationRate_gt: BigDecimal
  utilizationRate_gte: BigDecimal
  utilizationRate_in: [BigDecimal!]
  utilizationRate_lt: BigDecimal
  utilizationRate_lte: BigDecimal
  utilizationRate_not: BigDecimal
  utilizationRate_not_in: [BigDecimal!]
  variableBorrowIndex: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_not_in: [BigInt!]
  variableBorrowRate: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_lt: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_not_in: [BigInt!]
}

input Reserve_filter {
  aEmissionPerSecond: BigInt
  aEmissionPerSecond_gt: BigInt
  aEmissionPerSecond_gte: BigInt
  aEmissionPerSecond_in: [BigInt!]
  aEmissionPerSecond_lt: BigInt
  aEmissionPerSecond_lte: BigInt
  aEmissionPerSecond_not: BigInt
  aEmissionPerSecond_not_in: [BigInt!]
  aIncentivesLastUpdateTimestamp: Int
  aIncentivesLastUpdateTimestamp_gt: Int
  aIncentivesLastUpdateTimestamp_gte: Int
  aIncentivesLastUpdateTimestamp_in: [Int!]
  aIncentivesLastUpdateTimestamp_lt: Int
  aIncentivesLastUpdateTimestamp_lte: Int
  aIncentivesLastUpdateTimestamp_not: Int
  aIncentivesLastUpdateTimestamp_not_in: [Int!]
  aToken: String
  aTokenIncentivesIndex: BigInt
  aTokenIncentivesIndex_gt: BigInt
  aTokenIncentivesIndex_gte: BigInt
  aTokenIncentivesIndex_in: [BigInt!]
  aTokenIncentivesIndex_lt: BigInt
  aTokenIncentivesIndex_lte: BigInt
  aTokenIncentivesIndex_not: BigInt
  aTokenIncentivesIndex_not_in: [BigInt!]
  aToken_contains: String
  aToken_ends_with: String
  aToken_gt: String
  aToken_gte: String
  aToken_in: [String!]
  aToken_lt: String
  aToken_lte: String
  aToken_not: String
  aToken_not_contains: String
  aToken_not_ends_with: String
  aToken_not_in: [String!]
  aToken_not_starts_with: String
  aToken_starts_with: String
  availableLiquidity: BigInt
  availableLiquidity_gt: BigInt
  availableLiquidity_gte: BigInt
  availableLiquidity_in: [BigInt!]
  availableLiquidity_lt: BigInt
  availableLiquidity_lte: BigInt
  availableLiquidity_not: BigInt
  availableLiquidity_not_in: [BigInt!]
  averageStableRate: BigInt
  averageStableRate_gt: BigInt
  averageStableRate_gte: BigInt
  averageStableRate_in: [BigInt!]
  averageStableRate_lt: BigInt
  averageStableRate_lte: BigInt
  averageStableRate_not: BigInt
  averageStableRate_not_in: [BigInt!]
  baseLTVasCollateral: BigInt
  baseLTVasCollateral_gt: BigInt
  baseLTVasCollateral_gte: BigInt
  baseLTVasCollateral_in: [BigInt!]
  baseLTVasCollateral_lt: BigInt
  baseLTVasCollateral_lte: BigInt
  baseLTVasCollateral_not: BigInt
  baseLTVasCollateral_not_in: [BigInt!]
  baseVariableBorrowRate: BigInt
  baseVariableBorrowRate_gt: BigInt
  baseVariableBorrowRate_gte: BigInt
  baseVariableBorrowRate_in: [BigInt!]
  baseVariableBorrowRate_lt: BigInt
  baseVariableBorrowRate_lte: BigInt
  baseVariableBorrowRate_not: BigInt
  baseVariableBorrowRate_not_in: [BigInt!]
  borrowingEnabled: Boolean
  borrowingEnabled_in: [Boolean!]
  borrowingEnabled_not: Boolean
  borrowingEnabled_not_in: [Boolean!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isActive: Boolean
  isActive_in: [Boolean!]
  isActive_not: Boolean
  isActive_not_in: [Boolean!]
  isFrozen: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not: Boolean
  isFrozen_not_in: [Boolean!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_not_in: [Int!]
  lifetimeBorrows: BigInt
  lifetimeBorrows_gt: BigInt
  lifetimeBorrows_gte: BigInt
  lifetimeBorrows_in: [BigInt!]
  lifetimeBorrows_lt: BigInt
  lifetimeBorrows_lte: BigInt
  lifetimeBorrows_not: BigInt
  lifetimeBorrows_not_in: [BigInt!]
  lifetimeCurrentVariableDebt: BigInt
  lifetimeCurrentVariableDebt_gt: BigInt
  lifetimeCurrentVariableDebt_gte: BigInt
  lifetimeCurrentVariableDebt_in: [BigInt!]
  lifetimeCurrentVariableDebt_lt: BigInt
  lifetimeCurrentVariableDebt_lte: BigInt
  lifetimeCurrentVariableDebt_not: BigInt
  lifetimeCurrentVariableDebt_not_in: [BigInt!]
  lifetimeDepositorsInterestEarned: BigInt
  lifetimeDepositorsInterestEarned_gt: BigInt
  lifetimeDepositorsInterestEarned_gte: BigInt
  lifetimeDepositorsInterestEarned_in: [BigInt!]
  lifetimeDepositorsInterestEarned_lt: BigInt
  lifetimeDepositorsInterestEarned_lte: BigInt
  lifetimeDepositorsInterestEarned_not: BigInt
  lifetimeDepositorsInterestEarned_not_in: [BigInt!]
  lifetimeFlashLoanPremium: BigInt
  lifetimeFlashLoanPremium_gt: BigInt
  lifetimeFlashLoanPremium_gte: BigInt
  lifetimeFlashLoanPremium_in: [BigInt!]
  lifetimeFlashLoanPremium_lt: BigInt
  lifetimeFlashLoanPremium_lte: BigInt
  lifetimeFlashLoanPremium_not: BigInt
  lifetimeFlashLoanPremium_not_in: [BigInt!]
  lifetimeFlashLoans: BigInt
  lifetimeFlashLoans_gt: BigInt
  lifetimeFlashLoans_gte: BigInt
  lifetimeFlashLoans_in: [BigInt!]
  lifetimeFlashLoans_lt: BigInt
  lifetimeFlashLoans_lte: BigInt
  lifetimeFlashLoans_not: BigInt
  lifetimeFlashLoans_not_in: [BigInt!]
  lifetimeLiquidated: BigInt
  lifetimeLiquidated_gt: BigInt
  lifetimeLiquidated_gte: BigInt
  lifetimeLiquidated_in: [BigInt!]
  lifetimeLiquidated_lt: BigInt
  lifetimeLiquidated_lte: BigInt
  lifetimeLiquidated_not: BigInt
  lifetimeLiquidated_not_in: [BigInt!]
  lifetimeLiquidity: BigInt
  lifetimeLiquidity_gt: BigInt
  lifetimeLiquidity_gte: BigInt
  lifetimeLiquidity_in: [BigInt!]
  lifetimeLiquidity_lt: BigInt
  lifetimeLiquidity_lte: BigInt
  lifetimeLiquidity_not: BigInt
  lifetimeLiquidity_not_in: [BigInt!]
  lifetimePrincipalStableDebt: BigInt
  lifetimePrincipalStableDebt_gt: BigInt
  lifetimePrincipalStableDebt_gte: BigInt
  lifetimePrincipalStableDebt_in: [BigInt!]
  lifetimePrincipalStableDebt_lt: BigInt
  lifetimePrincipalStableDebt_lte: BigInt
  lifetimePrincipalStableDebt_not: BigInt
  lifetimePrincipalStableDebt_not_in: [BigInt!]
  lifetimeRepayments: BigInt
  lifetimeRepayments_gt: BigInt
  lifetimeRepayments_gte: BigInt
  lifetimeRepayments_in: [BigInt!]
  lifetimeRepayments_lt: BigInt
  lifetimeRepayments_lte: BigInt
  lifetimeRepayments_not: BigInt
  lifetimeRepayments_not_in: [BigInt!]
  lifetimeReserveFactorAccrued: BigInt
  lifetimeReserveFactorAccrued_gt: BigInt
  lifetimeReserveFactorAccrued_gte: BigInt
  lifetimeReserveFactorAccrued_in: [BigInt!]
  lifetimeReserveFactorAccrued_lt: BigInt
  lifetimeReserveFactorAccrued_lte: BigInt
  lifetimeReserveFactorAccrued_not: BigInt
  lifetimeReserveFactorAccrued_not_in: [BigInt!]
  lifetimeScaledVariableDebt: BigInt
  lifetimeScaledVariableDebt_gt: BigInt
  lifetimeScaledVariableDebt_gte: BigInt
  lifetimeScaledVariableDebt_in: [BigInt!]
  lifetimeScaledVariableDebt_lt: BigInt
  lifetimeScaledVariableDebt_lte: BigInt
  lifetimeScaledVariableDebt_not: BigInt
  lifetimeScaledVariableDebt_not_in: [BigInt!]
  lifetimeWithdrawals: BigInt
  lifetimeWithdrawals_gt: BigInt
  lifetimeWithdrawals_gte: BigInt
  lifetimeWithdrawals_in: [BigInt!]
  lifetimeWithdrawals_lt: BigInt
  lifetimeWithdrawals_lte: BigInt
  lifetimeWithdrawals_not: BigInt
  lifetimeWithdrawals_not_in: [BigInt!]
  liquidityIndex: BigInt
  liquidityIndex_gt: BigInt
  liquidityIndex_gte: BigInt
  liquidityIndex_in: [BigInt!]
  liquidityIndex_lt: BigInt
  liquidityIndex_lte: BigInt
  liquidityIndex_not: BigInt
  liquidityIndex_not_in: [BigInt!]
  liquidityRate: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_lt: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_not: BigInt
  liquidityRate_not_in: [BigInt!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  optimalUtilisationRate: BigInt
  optimalUtilisationRate_gt: BigInt
  optimalUtilisationRate_gte: BigInt
  optimalUtilisationRate_in: [BigInt!]
  optimalUtilisationRate_lt: BigInt
  optimalUtilisationRate_lte: BigInt
  optimalUtilisationRate_not: BigInt
  optimalUtilisationRate_not_in: [BigInt!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  price: String
  price_contains: String
  price_ends_with: String
  price_gt: String
  price_gte: String
  price_in: [String!]
  price_lt: String
  price_lte: String
  price_not: String
  price_not_contains: String
  price_not_ends_with: String
  price_not_in: [String!]
  price_not_starts_with: String
  price_starts_with: String
  reserveFactor: BigInt
  reserveFactor_gt: BigInt
  reserveFactor_gte: BigInt
  reserveFactor_in: [BigInt!]
  reserveFactor_lt: BigInt
  reserveFactor_lte: BigInt
  reserveFactor_not: BigInt
  reserveFactor_not_in: [BigInt!]
  reserveInterestRateStrategy: Bytes
  reserveInterestRateStrategy_contains: Bytes
  reserveInterestRateStrategy_in: [Bytes!]
  reserveInterestRateStrategy_not: Bytes
  reserveInterestRateStrategy_not_contains: Bytes
  reserveInterestRateStrategy_not_in: [Bytes!]
  reserveLiquidationBonus: BigInt
  reserveLiquidationBonus_gt: BigInt
  reserveLiquidationBonus_gte: BigInt
  reserveLiquidationBonus_in: [BigInt!]
  reserveLiquidationBonus_lt: BigInt
  reserveLiquidationBonus_lte: BigInt
  reserveLiquidationBonus_not: BigInt
  reserveLiquidationBonus_not_in: [BigInt!]
  reserveLiquidationThreshold: BigInt
  reserveLiquidationThreshold_gt: BigInt
  reserveLiquidationThreshold_gte: BigInt
  reserveLiquidationThreshold_in: [BigInt!]
  reserveLiquidationThreshold_lt: BigInt
  reserveLiquidationThreshold_lte: BigInt
  reserveLiquidationThreshold_not: BigInt
  reserveLiquidationThreshold_not_in: [BigInt!]
  sEmissionPerSecond: BigInt
  sEmissionPerSecond_gt: BigInt
  sEmissionPerSecond_gte: BigInt
  sEmissionPerSecond_in: [BigInt!]
  sEmissionPerSecond_lt: BigInt
  sEmissionPerSecond_lte: BigInt
  sEmissionPerSecond_not: BigInt
  sEmissionPerSecond_not_in: [BigInt!]
  sIncentivesLastUpdateTimestamp: Int
  sIncentivesLastUpdateTimestamp_gt: Int
  sIncentivesLastUpdateTimestamp_gte: Int
  sIncentivesLastUpdateTimestamp_in: [Int!]
  sIncentivesLastUpdateTimestamp_lt: Int
  sIncentivesLastUpdateTimestamp_lte: Int
  sIncentivesLastUpdateTimestamp_not: Int
  sIncentivesLastUpdateTimestamp_not_in: [Int!]
  sToken: String
  sTokenIncentivesIndex: BigInt
  sTokenIncentivesIndex_gt: BigInt
  sTokenIncentivesIndex_gte: BigInt
  sTokenIncentivesIndex_in: [BigInt!]
  sTokenIncentivesIndex_lt: BigInt
  sTokenIncentivesIndex_lte: BigInt
  sTokenIncentivesIndex_not: BigInt
  sTokenIncentivesIndex_not_in: [BigInt!]
  sToken_contains: String
  sToken_ends_with: String
  sToken_gt: String
  sToken_gte: String
  sToken_in: [String!]
  sToken_lt: String
  sToken_lte: String
  sToken_not: String
  sToken_not_contains: String
  sToken_not_ends_with: String
  sToken_not_in: [String!]
  sToken_not_starts_with: String
  sToken_starts_with: String
  stableBorrowRate: BigInt
  stableBorrowRateEnabled: Boolean
  stableBorrowRateEnabled_in: [Boolean!]
  stableBorrowRateEnabled_not: Boolean
  stableBorrowRateEnabled_not_in: [Boolean!]
  stableBorrowRate_gt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_lt: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_not_in: [BigInt!]
  stableDebtLastUpdateTimestamp: Int
  stableDebtLastUpdateTimestamp_gt: Int
  stableDebtLastUpdateTimestamp_gte: Int
  stableDebtLastUpdateTimestamp_in: [Int!]
  stableDebtLastUpdateTimestamp_lt: Int
  stableDebtLastUpdateTimestamp_lte: Int
  stableDebtLastUpdateTimestamp_not: Int
  stableDebtLastUpdateTimestamp_not_in: [Int!]
  stableRateSlope1: BigInt
  stableRateSlope1_gt: BigInt
  stableRateSlope1_gte: BigInt
  stableRateSlope1_in: [BigInt!]
  stableRateSlope1_lt: BigInt
  stableRateSlope1_lte: BigInt
  stableRateSlope1_not: BigInt
  stableRateSlope1_not_in: [BigInt!]
  stableRateSlope2: BigInt
  stableRateSlope2_gt: BigInt
  stableRateSlope2_gte: BigInt
  stableRateSlope2_in: [BigInt!]
  stableRateSlope2_lt: BigInt
  stableRateSlope2_lte: BigInt
  stableRateSlope2_not: BigInt
  stableRateSlope2_not_in: [BigInt!]
  symbol: String
  symbol_contains: String
  symbol_ends_with: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_ends_with: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_starts_with: String
  totalATokenSupply: BigInt
  totalATokenSupply_gt: BigInt
  totalATokenSupply_gte: BigInt
  totalATokenSupply_in: [BigInt!]
  totalATokenSupply_lt: BigInt
  totalATokenSupply_lte: BigInt
  totalATokenSupply_not: BigInt
  totalATokenSupply_not_in: [BigInt!]
  totalCurrentVariableDebt: BigInt
  totalCurrentVariableDebt_gt: BigInt
  totalCurrentVariableDebt_gte: BigInt
  totalCurrentVariableDebt_in: [BigInt!]
  totalCurrentVariableDebt_lt: BigInt
  totalCurrentVariableDebt_lte: BigInt
  totalCurrentVariableDebt_not: BigInt
  totalCurrentVariableDebt_not_in: [BigInt!]
  totalDeposits: BigInt
  totalDeposits_gt: BigInt
  totalDeposits_gte: BigInt
  totalDeposits_in: [BigInt!]
  totalDeposits_lt: BigInt
  totalDeposits_lte: BigInt
  totalDeposits_not: BigInt
  totalDeposits_not_in: [BigInt!]
  totalLiquidity: BigInt
  totalLiquidityAsCollateral: BigInt
  totalLiquidityAsCollateral_gt: BigInt
  totalLiquidityAsCollateral_gte: BigInt
  totalLiquidityAsCollateral_in: [BigInt!]
  totalLiquidityAsCollateral_lt: BigInt
  totalLiquidityAsCollateral_lte: BigInt
  totalLiquidityAsCollateral_not: BigInt
  totalLiquidityAsCollateral_not_in: [BigInt!]
  totalLiquidity_gt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_lt: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_not_in: [BigInt!]
  totalPrincipalStableDebt: BigInt
  totalPrincipalStableDebt_gt: BigInt
  totalPrincipalStableDebt_gte: BigInt
  totalPrincipalStableDebt_in: [BigInt!]
  totalPrincipalStableDebt_lt: BigInt
  totalPrincipalStableDebt_lte: BigInt
  totalPrincipalStableDebt_not: BigInt
  totalPrincipalStableDebt_not_in: [BigInt!]
  totalScaledVariableDebt: BigInt
  totalScaledVariableDebt_gt: BigInt
  totalScaledVariableDebt_gte: BigInt
  totalScaledVariableDebt_in: [BigInt!]
  totalScaledVariableDebt_lt: BigInt
  totalScaledVariableDebt_lte: BigInt
  totalScaledVariableDebt_not: BigInt
  totalScaledVariableDebt_not_in: [BigInt!]
  underlyingAsset: Bytes
  underlyingAsset_contains: Bytes
  underlyingAsset_in: [Bytes!]
  underlyingAsset_not: Bytes
  underlyingAsset_not_contains: Bytes
  underlyingAsset_not_in: [Bytes!]
  usageAsCollateralEnabled: Boolean
  usageAsCollateralEnabled_in: [Boolean!]
  usageAsCollateralEnabled_not: Boolean
  usageAsCollateralEnabled_not_in: [Boolean!]
  utilizationRate: BigDecimal
  utilizationRate_gt: BigDecimal
  utilizationRate_gte: BigDecimal
  utilizationRate_in: [BigDecimal!]
  utilizationRate_lt: BigDecimal
  utilizationRate_lte: BigDecimal
  utilizationRate_not: BigDecimal
  utilizationRate_not_in: [BigDecimal!]
  vEmissionPerSecond: BigInt
  vEmissionPerSecond_gt: BigInt
  vEmissionPerSecond_gte: BigInt
  vEmissionPerSecond_in: [BigInt!]
  vEmissionPerSecond_lt: BigInt
  vEmissionPerSecond_lte: BigInt
  vEmissionPerSecond_not: BigInt
  vEmissionPerSecond_not_in: [BigInt!]
  vIncentivesLastUpdateTimestamp: Int
  vIncentivesLastUpdateTimestamp_gt: Int
  vIncentivesLastUpdateTimestamp_gte: Int
  vIncentivesLastUpdateTimestamp_in: [Int!]
  vIncentivesLastUpdateTimestamp_lt: Int
  vIncentivesLastUpdateTimestamp_lte: Int
  vIncentivesLastUpdateTimestamp_not: Int
  vIncentivesLastUpdateTimestamp_not_in: [Int!]
  vToken: String
  vTokenIncentivesIndex: BigInt
  vTokenIncentivesIndex_gt: BigInt
  vTokenIncentivesIndex_gte: BigInt
  vTokenIncentivesIndex_in: [BigInt!]
  vTokenIncentivesIndex_lt: BigInt
  vTokenIncentivesIndex_lte: BigInt
  vTokenIncentivesIndex_not: BigInt
  vTokenIncentivesIndex_not_in: [BigInt!]
  vToken_contains: String
  vToken_ends_with: String
  vToken_gt: String
  vToken_gte: String
  vToken_in: [String!]
  vToken_lt: String
  vToken_lte: String
  vToken_not: String
  vToken_not_contains: String
  vToken_not_ends_with: String
  vToken_not_in: [String!]
  vToken_not_starts_with: String
  vToken_starts_with: String
  variableBorrowIndex: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_not_in: [BigInt!]
  variableBorrowRate: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_lt: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_not_in: [BigInt!]
  variableRateSlope1: BigInt
  variableRateSlope1_gt: BigInt
  variableRateSlope1_gte: BigInt
  variableRateSlope1_in: [BigInt!]
  variableRateSlope1_lt: BigInt
  variableRateSlope1_lte: BigInt
  variableRateSlope1_not: BigInt
  variableRateSlope1_not_in: [BigInt!]
  variableRateSlope2: BigInt
  variableRateSlope2_gt: BigInt
  variableRateSlope2_gte: BigInt
  variableRateSlope2_in: [BigInt!]
  variableRateSlope2_lt: BigInt
  variableRateSlope2_lte: BigInt
  variableRateSlope2_not: BigInt
  variableRateSlope2_not_in: [BigInt!]
}

input STokenBalanceHistoryItem_filter {
  avgStableBorrowRate: BigInt
  avgStableBorrowRate_gt: BigInt
  avgStableBorrowRate_gte: BigInt
  avgStableBorrowRate_in: [BigInt!]
  avgStableBorrowRate_lt: BigInt
  avgStableBorrowRate_lte: BigInt
  avgStableBorrowRate_not: BigInt
  avgStableBorrowRate_not_in: [BigInt!]
  currentStableDebt: BigInt
  currentStableDebt_gt: BigInt
  currentStableDebt_gte: BigInt
  currentStableDebt_in: [BigInt!]
  currentStableDebt_lt: BigInt
  currentStableDebt_lte: BigInt
  currentStableDebt_not: BigInt
  currentStableDebt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  principalStableDebt: BigInt
  principalStableDebt_gt: BigInt
  principalStableDebt_gte: BigInt
  principalStableDebt_in: [BigInt!]
  principalStableDebt_lt: BigInt
  principalStableDebt_lte: BigInt
  principalStableDebt_not: BigInt
  principalStableDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
}

input SToken_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  tokenContractImpl: Bytes
  tokenContractImpl_contains: Bytes
  tokenContractImpl_in: [Bytes!]
  tokenContractImpl_not: Bytes
  tokenContractImpl_not_contains: Bytes
  tokenContractImpl_not_in: [Bytes!]
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_not_in: [Int!]
}

input StableDebtToken_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_not_in: [Int!]
}

input StableTokenDelegatedAllowance_filter {
  amountAllowed: BigInt
  amountAllowed_gt: BigInt
  amountAllowed_gte: BigInt
  amountAllowed_in: [BigInt!]
  amountAllowed_lt: BigInt
  amountAllowed_lte: BigInt
  amountAllowed_not: BigInt
  amountAllowed_not_in: [BigInt!]
  fromUser: String
  fromUser_contains: String
  fromUser_ends_with: String
  fromUser_gt: String
  fromUser_gte: String
  fromUser_in: [String!]
  fromUser_lt: String
  fromUser_lte: String
  fromUser_not: String
  fromUser_not_contains: String
  fromUser_not_ends_with: String
  fromUser_not_in: [String!]
  fromUser_not_starts_with: String
  fromUser_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  toUser: String
  toUser_contains: String
  toUser_ends_with: String
  toUser_gt: String
  toUser_gte: String
  toUser_in: [String!]
  toUser_lt: String
  toUser_lte: String
  toUser_not: String
  toUser_not_contains: String
  toUser_not_ends_with: String
  toUser_not_in: [String!]
  toUser_not_starts_with: String
  toUser_starts_with: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
}

input SwapHistory_filter {
  fromAmount: BigInt
  fromAmount_gt: BigInt
  fromAmount_gte: BigInt
  fromAmount_in: [BigInt!]
  fromAmount_lt: BigInt
  fromAmount_lte: BigInt
  fromAmount_not: BigInt
  fromAmount_not_in: [BigInt!]
  fromAsset: String
  fromAsset_contains: String
  fromAsset_ends_with: String
  fromAsset_gt: String
  fromAsset_gte: String
  fromAsset_in: [String!]
  fromAsset_lt: String
  fromAsset_lte: String
  fromAsset_not: String
  fromAsset_not_contains: String
  fromAsset_not_ends_with: String
  fromAsset_not_in: [String!]
  fromAsset_not_starts_with: String
  fromAsset_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  receivedAmount: BigInt
  receivedAmount_gt: BigInt
  receivedAmount_gte: BigInt
  receivedAmount_in: [BigInt!]
  receivedAmount_lt: BigInt
  receivedAmount_lte: BigInt
  receivedAmount_not: BigInt
  receivedAmount_not_in: [BigInt!]
  swapType: String
  swapType_contains: String
  swapType_ends_with: String
  swapType_gt: String
  swapType_gte: String
  swapType_in: [String!]
  swapType_lt: String
  swapType_lte: String
  swapType_not: String
  swapType_not_contains: String
  swapType_not_ends_with: String
  swapType_not_in: [String!]
  swapType_not_starts_with: String
  swapType_starts_with: String
  toAsset: String
  toAsset_contains: String
  toAsset_ends_with: String
  toAsset_gt: String
  toAsset_gte: String
  toAsset_in: [String!]
  toAsset_lt: String
  toAsset_lte: String
  toAsset_not: String
  toAsset_not_contains: String
  toAsset_not_ends_with: String
  toAsset_not_in: [String!]
  toAsset_not_starts_with: String
  toAsset_starts_with: String
}

input Swap_filter {
  borrowRateModeFrom: BorrowRateMode
  borrowRateModeFrom_in: [BorrowRateMode!]
  borrowRateModeFrom_not: BorrowRateMode
  borrowRateModeFrom_not_in: [BorrowRateMode!]
  borrowRateModeTo: BorrowRateMode
  borrowRateModeTo_in: [BorrowRateMode!]
  borrowRateModeTo_not: BorrowRateMode
  borrowRateModeTo_not_in: [BorrowRateMode!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  stableBorrowRate: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_lt: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
  variableBorrowRate: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_lt: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_not_in: [BigInt!]
}

input UsageAsCollateral_filter {
  fromState: Boolean
  fromState_in: [Boolean!]
  fromState_not: Boolean
  fromState_not_in: [Boolean!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  toState: Boolean
  toState_in: [Boolean!]
  toState_not: Boolean
  toState_not_in: [Boolean!]
  user: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input UsdEthPriceHistoryItem_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  oracle: String
  oracle_contains: String
  oracle_ends_with: String
  oracle_gt: String
  oracle_gte: String
  oracle_in: [String!]
  oracle_lt: String
  oracle_lte: String
  oracle_not: String
  oracle_not_contains: String
  oracle_not_ends_with: String
  oracle_not_in: [String!]
  oracle_not_starts_with: String
  oracle_starts_with: String
  price: BigInt
  price_gt: BigInt
  price_gte: BigInt
  price_in: [BigInt!]
  price_lt: BigInt
  price_lte: BigInt
  price_not: BigInt
  price_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
}

input UserReserve_filter {
  aIncentivesLastUpdateTimestamp: Int
  aIncentivesLastUpdateTimestamp_gt: Int
  aIncentivesLastUpdateTimestamp_gte: Int
  aIncentivesLastUpdateTimestamp_in: [Int!]
  aIncentivesLastUpdateTimestamp_lt: Int
  aIncentivesLastUpdateTimestamp_lte: Int
  aIncentivesLastUpdateTimestamp_not: Int
  aIncentivesLastUpdateTimestamp_not_in: [Int!]
  aTokenincentivesUserIndex: BigInt
  aTokenincentivesUserIndex_gt: BigInt
  aTokenincentivesUserIndex_gte: BigInt
  aTokenincentivesUserIndex_in: [BigInt!]
  aTokenincentivesUserIndex_lt: BigInt
  aTokenincentivesUserIndex_lte: BigInt
  aTokenincentivesUserIndex_not: BigInt
  aTokenincentivesUserIndex_not_in: [BigInt!]
  currentATokenBalance: BigInt
  currentATokenBalance_gt: BigInt
  currentATokenBalance_gte: BigInt
  currentATokenBalance_in: [BigInt!]
  currentATokenBalance_lt: BigInt
  currentATokenBalance_lte: BigInt
  currentATokenBalance_not: BigInt
  currentATokenBalance_not_in: [BigInt!]
  currentStableDebt: BigInt
  currentStableDebt_gt: BigInt
  currentStableDebt_gte: BigInt
  currentStableDebt_in: [BigInt!]
  currentStableDebt_lt: BigInt
  currentStableDebt_lte: BigInt
  currentStableDebt_not: BigInt
  currentStableDebt_not_in: [BigInt!]
  currentTotalDebt: BigInt
  currentTotalDebt_gt: BigInt
  currentTotalDebt_gte: BigInt
  currentTotalDebt_in: [BigInt!]
  currentTotalDebt_lt: BigInt
  currentTotalDebt_lte: BigInt
  currentTotalDebt_not: BigInt
  currentTotalDebt_not_in: [BigInt!]
  currentVariableDebt: BigInt
  currentVariableDebt_gt: BigInt
  currentVariableDebt_gte: BigInt
  currentVariableDebt_in: [BigInt!]
  currentVariableDebt_lt: BigInt
  currentVariableDebt_lte: BigInt
  currentVariableDebt_not: BigInt
  currentVariableDebt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_not_in: [Int!]
  liquidityRate: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_lt: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_not: BigInt
  liquidityRate_not_in: [BigInt!]
  oldStableBorrowRate: BigInt
  oldStableBorrowRate_gt: BigInt
  oldStableBorrowRate_gte: BigInt
  oldStableBorrowRate_in: [BigInt!]
  oldStableBorrowRate_lt: BigInt
  oldStableBorrowRate_lte: BigInt
  oldStableBorrowRate_not: BigInt
  oldStableBorrowRate_not_in: [BigInt!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  principalStableDebt: BigInt
  principalStableDebt_gt: BigInt
  principalStableDebt_gte: BigInt
  principalStableDebt_in: [BigInt!]
  principalStableDebt_lt: BigInt
  principalStableDebt_lte: BigInt
  principalStableDebt_not: BigInt
  principalStableDebt_not_in: [BigInt!]
  reserve: String
  reserve_contains: String
  reserve_ends_with: String
  reserve_gt: String
  reserve_gte: String
  reserve_in: [String!]
  reserve_lt: String
  reserve_lte: String
  reserve_not: String
  reserve_not_contains: String
  reserve_not_ends_with: String
  reserve_not_in: [String!]
  reserve_not_starts_with: String
  reserve_starts_with: String
  sIncentivesLastUpdateTimestamp: Int
  sIncentivesLastUpdateTimestamp_gt: Int
  sIncentivesLastUpdateTimestamp_gte: Int
  sIncentivesLastUpdateTimestamp_in: [Int!]
  sIncentivesLastUpdateTimestamp_lt: Int
  sIncentivesLastUpdateTimestamp_lte: Int
  sIncentivesLastUpdateTimestamp_not: Int
  sIncentivesLastUpdateTimestamp_not_in: [Int!]
  sTokenincentivesUserIndex: BigInt
  sTokenincentivesUserIndex_gt: BigInt
  sTokenincentivesUserIndex_gte: BigInt
  sTokenincentivesUserIndex_in: [BigInt!]
  sTokenincentivesUserIndex_lt: BigInt
  sTokenincentivesUserIndex_lte: BigInt
  sTokenincentivesUserIndex_not: BigInt
  sTokenincentivesUserIndex_not_in: [BigInt!]
  scaledATokenBalance: BigInt
  scaledATokenBalance_gt: BigInt
  scaledATokenBalance_gte: BigInt
  scaledATokenBalance_in: [BigInt!]
  scaledATokenBalance_lt: BigInt
  scaledATokenBalance_lte: BigInt
  scaledATokenBalance_not: BigInt
  scaledATokenBalance_not_in: [BigInt!]
  scaledVariableDebt: BigInt
  scaledVariableDebt_gt: BigInt
  scaledVariableDebt_gte: BigInt
  scaledVariableDebt_in: [BigInt!]
  scaledVariableDebt_lt: BigInt
  scaledVariableDebt_lte: BigInt
  scaledVariableDebt_not: BigInt
  scaledVariableDebt_not_in: [BigInt!]
  stableBorrowLastUpdateTimestamp: Int
  stableBorrowLastUpdateTimestamp_gt: Int
  stableBorrowLastUpdateTimestamp_gte: Int
  stableBorrowLastUpdateTimestamp_in: [Int!]
  stableBorrowLastUpdateTimestamp_lt: Int
  stableBorrowLastUpdateTimestamp_lte: Int
  stableBorrowLastUpdateTimestamp_not: Int
  stableBorrowLastUpdateTimestamp_not_in: [Int!]
  stableBorrowRate: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_lt: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_not_in: [BigInt!]
  usageAsCollateralEnabledOnUser: Boolean
  usageAsCollateralEnabledOnUser_in: [Boolean!]
  usageAsCollateralEnabledOnUser_not: Boolean
  usageAsCollateralEnabledOnUser_not_in: [Boolean!]
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
  vIncentivesLastUpdateTimestamp: Int
  vIncentivesLastUpdateTimestamp_gt: Int
  vIncentivesLastUpdateTimestamp_gte: Int
  vIncentivesLastUpdateTimestamp_in: [Int!]
  vIncentivesLastUpdateTimestamp_lt: Int
  vIncentivesLastUpdateTimestamp_lte: Int
  vIncentivesLastUpdateTimestamp_not: Int
  vIncentivesLastUpdateTimestamp_not_in: [Int!]
  vTokenincentivesUserIndex: BigInt
  vTokenincentivesUserIndex_gt: BigInt
  vTokenincentivesUserIndex_gte: BigInt
  vTokenincentivesUserIndex_in: [BigInt!]
  vTokenincentivesUserIndex_lt: BigInt
  vTokenincentivesUserIndex_lte: BigInt
  vTokenincentivesUserIndex_not: BigInt
  vTokenincentivesUserIndex_not_in: [BigInt!]
  variableBorrowIndex: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_not_in: [BigInt!]
}

input UserTransaction_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  user: String
  user_contains: String
  user_ends_with: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_ends_with: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_starts_with: String
}

input User_filter {
  borrowedReservesCount: Int
  borrowedReservesCount_gt: Int
  borrowedReservesCount_gte: Int
  borrowedReservesCount_in: [Int!]
  borrowedReservesCount_lt: Int
  borrowedReservesCount_lte: Int
  borrowedReservesCount_not: Int
  borrowedReservesCount_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  incentivesLastUpdated: Int
  incentivesLastUpdated_gt: Int
  incentivesLastUpdated_gte: Int
  incentivesLastUpdated_in: [Int!]
  incentivesLastUpdated_lt: Int
  incentivesLastUpdated_lte: Int
  incentivesLastUpdated_not: Int
  incentivesLastUpdated_not_in: [Int!]
  lifetimeRewards: BigInt
  lifetimeRewards_gt: BigInt
  lifetimeRewards_gte: BigInt
  lifetimeRewards_in: [BigInt!]
  lifetimeRewards_lt: BigInt
  lifetimeRewards_lte: BigInt
  lifetimeRewards_not: BigInt
  lifetimeRewards_not_in: [BigInt!]
  unclaimedRewards: BigInt
  unclaimedRewards_gt: BigInt
  unclaimedRewards_gte: BigInt
  unclaimedRewards_in: [BigInt!]
  unclaimedRewards_lt: BigInt
  unclaimedRewards_lte: BigInt
  unclaimedRewards_not: BigInt
  unclaimedRewards_not_in: [BigInt!]
}

input VTokenBalanceHistoryItem_filter {
  currentVariableDebt: BigInt
  currentVariableDebt_gt: BigInt
  currentVariableDebt_gte: BigInt
  currentVariableDebt_in: [BigInt!]
  currentVariableDebt_lt: BigInt
  currentVariableDebt_lte: BigInt
  currentVariableDebt_not: BigInt
  currentVariableDebt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  scaledVariableDebt: BigInt
  scaledVariableDebt_gt: BigInt
  scaledVariableDebt_gte: BigInt
  scaledVariableDebt_in: [BigInt!]
  scaledVariableDebt_lt: BigInt
  scaledVariableDebt_lte: BigInt
  scaledVariableDebt_not: BigInt
  scaledVariableDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
}

input VToken_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  tokenContractImpl: Bytes
  tokenContractImpl_contains: Bytes
  tokenContractImpl_in: [Bytes!]
  tokenContractImpl_not: Bytes
  tokenContractImpl_not_contains: Bytes
  tokenContractImpl_not_in: [Bytes!]
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_not_in: [Int!]
}

input VariableDebtToken_filter {
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  pool: String
  pool_contains: String
  pool_ends_with: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_ends_with: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_starts_with: String
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_not_in: [Int!]
}

input VariableTokenDelegatedAllowance_filter {
  amountAllowed: BigInt
  amountAllowed_gt: BigInt
  amountAllowed_gte: BigInt
  amountAllowed_in: [BigInt!]
  amountAllowed_lt: BigInt
  amountAllowed_lte: BigInt
  amountAllowed_not: BigInt
  amountAllowed_not_in: [BigInt!]
  fromUser: String
  fromUser_contains: String
  fromUser_ends_with: String
  fromUser_gt: String
  fromUser_gte: String
  fromUser_in: [String!]
  fromUser_lt: String
  fromUser_lte: String
  fromUser_not: String
  fromUser_not_contains: String
  fromUser_not_ends_with: String
  fromUser_not_in: [String!]
  fromUser_not_starts_with: String
  fromUser_starts_with: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  toUser: String
  toUser_contains: String
  toUser_ends_with: String
  toUser_gt: String
  toUser_gte: String
  toUser_in: [String!]
  toUser_lt: String
  toUser_lte: String
  toUser_not: String
  toUser_not_contains: String
  toUser_not_ends_with: String
  toUser_not_in: [String!]
  toUser_not_starts_with: String
  toUser_starts_with: String
  userReserve: String
  userReserve_contains: String
  userReserve_ends_with: String
  userReserve_gt: String
  userReserve_gte: String
  userReserve_in: [String!]
  userReserve_lt: String
  userReserve_lte: String
  userReserve_not: String
  userReserve_not_contains: String
  userReserve_not_ends_with: String
  userReserve_not_in: [String!]
  userReserve_not_starts_with: String
  userReserve_starts_with: String
}

input WETHReserve_filter {
  address: Bytes
  address_contains: Bytes
  address_in: [Bytes!]
  address_not: Bytes
  address_not_contains: Bytes
  address_not_in: [Bytes!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  symbol: String
  symbol_contains: String
  symbol_ends_with: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_ends_with: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_starts_with: String
  updatedBlockNumber: BigInt
  updatedBlockNumber_gt: BigInt
  updatedBlockNumber_gte: BigInt
  updatedBlockNumber_in: [BigInt!]
  updatedBlockNumber_lt: BigInt
  updatedBlockNumber_lte: BigInt
  updatedBlockNumber_not: BigInt
  updatedBlockNumber_not_in: [BigInt!]
  updatedTimestamp: Int
  updatedTimestamp_gt: Int
  updatedTimestamp_gte: Int
  updatedTimestamp_in: [Int!]
  updatedTimestamp_lt: Int
  updatedTimestamp_lte: Int
  updatedTimestamp_not: Int
  updatedTimestamp_not_in: [Int!]
}


scalar BigDecimal

scalar BigInt

scalar Bytes
